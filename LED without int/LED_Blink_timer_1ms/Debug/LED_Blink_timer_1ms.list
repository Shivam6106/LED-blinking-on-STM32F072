
LED_Blink_timer_1ms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000292c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080029ec  080029ec  000129ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a1c  08002a1c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002a1c  08002a1c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a1c  08002a1c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a1c  08002a1c  00012a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a20  08002a20  00012a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002a24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000458  2000000c  08002a30  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000464  08002a30  00020464  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012766  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002681  00000000  00000000  0003279a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001130  00000000  00000000  00034e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001008  00000000  00000000  00035f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a1e7  00000000  00000000  00036f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014413  00000000  00000000  0005113f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099d03  00000000  00000000  00065552  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ff255  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ea4  00000000  00000000  000ff2a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080029d4 	.word	0x080029d4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080029d4 	.word	0x080029d4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fc26 	bl	8000a74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f820 	bl	800026c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f9a8 	bl	8000580 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000230:	f000 f882 	bl	8000338 <MX_I2C2_Init>
  MX_SPI2_Init();
 8000234:	f000 f8c0 	bl	80003b8 <MX_SPI2_Init>
  MX_TSC_Init();
 8000238:	f000 f938 	bl	80004ac <MX_TSC_Init>
  MX_USB_PCD_Init();
 800023c:	f000 f97a 	bl	8000534 <MX_USB_PCD_Init>
  MX_TIM6_Init();
 8000240:	f000 f8f8 	bl	8000434 <MX_TIM6_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start(&htim6);
 8000244:	4b07      	ldr	r3, [pc, #28]	; (8000264 <main+0x44>)
 8000246:	0018      	movs	r0, r3
 8000248:	f002 f836 	bl	80022b8 <HAL_TIM_Base_Start>
    while (1)
    {
  	 if (__HAL_TIM_GET_COUNTER(&htim6) == 0)
 800024c:	4b05      	ldr	r3, [pc, #20]	; (8000264 <main+0x44>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000252:	2b00      	cmp	r3, #0
 8000254:	d1fa      	bne.n	800024c <main+0x2c>
  	 {
  		 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 8000256:	4b04      	ldr	r3, [pc, #16]	; (8000268 <main+0x48>)
 8000258:	2180      	movs	r1, #128	; 0x80
 800025a:	0018      	movs	r0, r3
 800025c:	f000 fee1 	bl	8001022 <HAL_GPIO_TogglePin>
  	 if (__HAL_TIM_GET_COUNTER(&htim6) == 0)
 8000260:	e7f4      	b.n	800024c <main+0x2c>
 8000262:	46c0      	nop			; (mov r8, r8)
 8000264:	200000e0 	.word	0x200000e0
 8000268:	48000800 	.word	0x48000800

0800026c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800026c:	b590      	push	{r4, r7, lr}
 800026e:	b099      	sub	sp, #100	; 0x64
 8000270:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000272:	242c      	movs	r4, #44	; 0x2c
 8000274:	193b      	adds	r3, r7, r4
 8000276:	0018      	movs	r0, r3
 8000278:	2334      	movs	r3, #52	; 0x34
 800027a:	001a      	movs	r2, r3
 800027c:	2100      	movs	r1, #0
 800027e:	f002 fba1 	bl	80029c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000282:	231c      	movs	r3, #28
 8000284:	18fb      	adds	r3, r7, r3
 8000286:	0018      	movs	r0, r3
 8000288:	2310      	movs	r3, #16
 800028a:	001a      	movs	r2, r3
 800028c:	2100      	movs	r1, #0
 800028e:	f002 fb99 	bl	80029c4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000292:	003b      	movs	r3, r7
 8000294:	0018      	movs	r0, r3
 8000296:	231c      	movs	r3, #28
 8000298:	001a      	movs	r2, r3
 800029a:	2100      	movs	r1, #0
 800029c:	f002 fb92 	bl	80029c4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80002a0:	0021      	movs	r1, r4
 80002a2:	187b      	adds	r3, r7, r1
 80002a4:	2222      	movs	r2, #34	; 0x22
 80002a6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002a8:	187b      	adds	r3, r7, r1
 80002aa:	2201      	movs	r2, #1
 80002ac:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80002ae:	187b      	adds	r3, r7, r1
 80002b0:	2201      	movs	r2, #1
 80002b2:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002b4:	187b      	adds	r3, r7, r1
 80002b6:	2210      	movs	r2, #16
 80002b8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ba:	187b      	adds	r3, r7, r1
 80002bc:	2202      	movs	r2, #2
 80002be:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002c0:	187b      	adds	r3, r7, r1
 80002c2:	2280      	movs	r2, #128	; 0x80
 80002c4:	0212      	lsls	r2, r2, #8
 80002c6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002c8:	187b      	adds	r3, r7, r1
 80002ca:	2280      	movs	r2, #128	; 0x80
 80002cc:	0352      	lsls	r2, r2, #13
 80002ce:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002d0:	187b      	adds	r3, r7, r1
 80002d2:	2200      	movs	r2, #0
 80002d4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d6:	187b      	adds	r3, r7, r1
 80002d8:	0018      	movs	r0, r3
 80002da:	f001 f915 	bl	8001508 <HAL_RCC_OscConfig>
 80002de:	1e03      	subs	r3, r0, #0
 80002e0:	d001      	beq.n	80002e6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80002e2:	f000 f9c9 	bl	8000678 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e6:	211c      	movs	r1, #28
 80002e8:	187b      	adds	r3, r7, r1
 80002ea:	2207      	movs	r2, #7
 80002ec:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ee:	187b      	adds	r3, r7, r1
 80002f0:	2202      	movs	r2, #2
 80002f2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f4:	187b      	adds	r3, r7, r1
 80002f6:	2200      	movs	r2, #0
 80002f8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002fa:	187b      	adds	r3, r7, r1
 80002fc:	2200      	movs	r2, #0
 80002fe:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000300:	187b      	adds	r3, r7, r1
 8000302:	2101      	movs	r1, #1
 8000304:	0018      	movs	r0, r3
 8000306:	f001 fc85 	bl	8001c14 <HAL_RCC_ClockConfig>
 800030a:	1e03      	subs	r3, r0, #0
 800030c:	d001      	beq.n	8000312 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800030e:	f000 f9b3 	bl	8000678 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000312:	003b      	movs	r3, r7
 8000314:	2280      	movs	r2, #128	; 0x80
 8000316:	0292      	lsls	r2, r2, #10
 8000318:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800031a:	003b      	movs	r3, r7
 800031c:	2200      	movs	r2, #0
 800031e:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000320:	003b      	movs	r3, r7
 8000322:	0018      	movs	r0, r3
 8000324:	f001 fdc2 	bl	8001eac <HAL_RCCEx_PeriphCLKConfig>
 8000328:	1e03      	subs	r3, r0, #0
 800032a:	d001      	beq.n	8000330 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800032c:	f000 f9a4 	bl	8000678 <Error_Handler>
  }
}
 8000330:	46c0      	nop			; (mov r8, r8)
 8000332:	46bd      	mov	sp, r7
 8000334:	b019      	add	sp, #100	; 0x64
 8000336:	bd90      	pop	{r4, r7, pc}

08000338 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800033c:	4b1b      	ldr	r3, [pc, #108]	; (80003ac <MX_I2C2_Init+0x74>)
 800033e:	4a1c      	ldr	r2, [pc, #112]	; (80003b0 <MX_I2C2_Init+0x78>)
 8000340:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8000342:	4b1a      	ldr	r3, [pc, #104]	; (80003ac <MX_I2C2_Init+0x74>)
 8000344:	4a1b      	ldr	r2, [pc, #108]	; (80003b4 <MX_I2C2_Init+0x7c>)
 8000346:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000348:	4b18      	ldr	r3, [pc, #96]	; (80003ac <MX_I2C2_Init+0x74>)
 800034a:	2200      	movs	r2, #0
 800034c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800034e:	4b17      	ldr	r3, [pc, #92]	; (80003ac <MX_I2C2_Init+0x74>)
 8000350:	2201      	movs	r2, #1
 8000352:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000354:	4b15      	ldr	r3, [pc, #84]	; (80003ac <MX_I2C2_Init+0x74>)
 8000356:	2200      	movs	r2, #0
 8000358:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800035a:	4b14      	ldr	r3, [pc, #80]	; (80003ac <MX_I2C2_Init+0x74>)
 800035c:	2200      	movs	r2, #0
 800035e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000360:	4b12      	ldr	r3, [pc, #72]	; (80003ac <MX_I2C2_Init+0x74>)
 8000362:	2200      	movs	r2, #0
 8000364:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000366:	4b11      	ldr	r3, [pc, #68]	; (80003ac <MX_I2C2_Init+0x74>)
 8000368:	2200      	movs	r2, #0
 800036a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800036c:	4b0f      	ldr	r3, [pc, #60]	; (80003ac <MX_I2C2_Init+0x74>)
 800036e:	2200      	movs	r2, #0
 8000370:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000372:	4b0e      	ldr	r3, [pc, #56]	; (80003ac <MX_I2C2_Init+0x74>)
 8000374:	0018      	movs	r0, r3
 8000376:	f000 fe6f 	bl	8001058 <HAL_I2C_Init>
 800037a:	1e03      	subs	r3, r0, #0
 800037c:	d001      	beq.n	8000382 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800037e:	f000 f97b 	bl	8000678 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000382:	4b0a      	ldr	r3, [pc, #40]	; (80003ac <MX_I2C2_Init+0x74>)
 8000384:	2100      	movs	r1, #0
 8000386:	0018      	movs	r0, r3
 8000388:	f000 fefc 	bl	8001184 <HAL_I2CEx_ConfigAnalogFilter>
 800038c:	1e03      	subs	r3, r0, #0
 800038e:	d001      	beq.n	8000394 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000390:	f000 f972 	bl	8000678 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000394:	4b05      	ldr	r3, [pc, #20]	; (80003ac <MX_I2C2_Init+0x74>)
 8000396:	2100      	movs	r1, #0
 8000398:	0018      	movs	r0, r3
 800039a:	f000 ff3f 	bl	800121c <HAL_I2CEx_ConfigDigitalFilter>
 800039e:	1e03      	subs	r3, r0, #0
 80003a0:	d001      	beq.n	80003a6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80003a2:	f000 f969 	bl	8000678 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80003a6:	46c0      	nop			; (mov r8, r8)
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	2000008c 	.word	0x2000008c
 80003b0:	40005800 	.word	0x40005800
 80003b4:	20303e5d 	.word	0x20303e5d

080003b8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80003bc:	4b1b      	ldr	r3, [pc, #108]	; (800042c <MX_SPI2_Init+0x74>)
 80003be:	4a1c      	ldr	r2, [pc, #112]	; (8000430 <MX_SPI2_Init+0x78>)
 80003c0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80003c2:	4b1a      	ldr	r3, [pc, #104]	; (800042c <MX_SPI2_Init+0x74>)
 80003c4:	2282      	movs	r2, #130	; 0x82
 80003c6:	0052      	lsls	r2, r2, #1
 80003c8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80003ca:	4b18      	ldr	r3, [pc, #96]	; (800042c <MX_SPI2_Init+0x74>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80003d0:	4b16      	ldr	r3, [pc, #88]	; (800042c <MX_SPI2_Init+0x74>)
 80003d2:	22c0      	movs	r2, #192	; 0xc0
 80003d4:	0092      	lsls	r2, r2, #2
 80003d6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003d8:	4b14      	ldr	r3, [pc, #80]	; (800042c <MX_SPI2_Init+0x74>)
 80003da:	2200      	movs	r2, #0
 80003dc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003de:	4b13      	ldr	r3, [pc, #76]	; (800042c <MX_SPI2_Init+0x74>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80003e4:	4b11      	ldr	r3, [pc, #68]	; (800042c <MX_SPI2_Init+0x74>)
 80003e6:	2280      	movs	r2, #128	; 0x80
 80003e8:	0092      	lsls	r2, r2, #2
 80003ea:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80003ec:	4b0f      	ldr	r3, [pc, #60]	; (800042c <MX_SPI2_Init+0x74>)
 80003ee:	2208      	movs	r2, #8
 80003f0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003f2:	4b0e      	ldr	r3, [pc, #56]	; (800042c <MX_SPI2_Init+0x74>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80003f8:	4b0c      	ldr	r3, [pc, #48]	; (800042c <MX_SPI2_Init+0x74>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003fe:	4b0b      	ldr	r3, [pc, #44]	; (800042c <MX_SPI2_Init+0x74>)
 8000400:	2200      	movs	r2, #0
 8000402:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000404:	4b09      	ldr	r3, [pc, #36]	; (800042c <MX_SPI2_Init+0x74>)
 8000406:	2207      	movs	r2, #7
 8000408:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800040a:	4b08      	ldr	r3, [pc, #32]	; (800042c <MX_SPI2_Init+0x74>)
 800040c:	2200      	movs	r2, #0
 800040e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000410:	4b06      	ldr	r3, [pc, #24]	; (800042c <MX_SPI2_Init+0x74>)
 8000412:	2208      	movs	r2, #8
 8000414:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000416:	4b05      	ldr	r3, [pc, #20]	; (800042c <MX_SPI2_Init+0x74>)
 8000418:	0018      	movs	r0, r3
 800041a:	f001 fe45 	bl	80020a8 <HAL_SPI_Init>
 800041e:	1e03      	subs	r3, r0, #0
 8000420:	d001      	beq.n	8000426 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000422:	f000 f929 	bl	8000678 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}
 800042c:	20000028 	.word	0x20000028
 8000430:	40003800 	.word	0x40003800

08000434 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800043a:	003b      	movs	r3, r7
 800043c:	0018      	movs	r0, r3
 800043e:	2308      	movs	r3, #8
 8000440:	001a      	movs	r2, r3
 8000442:	2100      	movs	r1, #0
 8000444:	f002 fabe 	bl	80029c4 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000448:	4b15      	ldr	r3, [pc, #84]	; (80004a0 <MX_TIM6_Init+0x6c>)
 800044a:	4a16      	ldr	r2, [pc, #88]	; (80004a4 <MX_TIM6_Init+0x70>)
 800044c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 800044e:	4b14      	ldr	r3, [pc, #80]	; (80004a0 <MX_TIM6_Init+0x6c>)
 8000450:	4a15      	ldr	r2, [pc, #84]	; (80004a8 <MX_TIM6_Init+0x74>)
 8000452:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000454:	4b12      	ldr	r3, [pc, #72]	; (80004a0 <MX_TIM6_Init+0x6c>)
 8000456:	2200      	movs	r2, #0
 8000458:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 5;
 800045a:	4b11      	ldr	r3, [pc, #68]	; (80004a0 <MX_TIM6_Init+0x6c>)
 800045c:	2205      	movs	r2, #5
 800045e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000460:	4b0f      	ldr	r3, [pc, #60]	; (80004a0 <MX_TIM6_Init+0x6c>)
 8000462:	2280      	movs	r2, #128	; 0x80
 8000464:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000466:	4b0e      	ldr	r3, [pc, #56]	; (80004a0 <MX_TIM6_Init+0x6c>)
 8000468:	0018      	movs	r0, r3
 800046a:	f001 fed5 	bl	8002218 <HAL_TIM_Base_Init>
 800046e:	1e03      	subs	r3, r0, #0
 8000470:	d001      	beq.n	8000476 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000472:	f000 f901 	bl	8000678 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000476:	003b      	movs	r3, r7
 8000478:	2200      	movs	r2, #0
 800047a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800047c:	003b      	movs	r3, r7
 800047e:	2200      	movs	r2, #0
 8000480:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000482:	003a      	movs	r2, r7
 8000484:	4b06      	ldr	r3, [pc, #24]	; (80004a0 <MX_TIM6_Init+0x6c>)
 8000486:	0011      	movs	r1, r2
 8000488:	0018      	movs	r0, r3
 800048a:	f002 f91d 	bl	80026c8 <HAL_TIMEx_MasterConfigSynchronization>
 800048e:	1e03      	subs	r3, r0, #0
 8000490:	d001      	beq.n	8000496 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8000492:	f000 f8f1 	bl	8000678 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	46bd      	mov	sp, r7
 800049a:	b002      	add	sp, #8
 800049c:	bd80      	pop	{r7, pc}
 800049e:	46c0      	nop			; (mov r8, r8)
 80004a0:	200000e0 	.word	0x200000e0
 80004a4:	40001000 	.word	0x40001000
 80004a8:	00001f3f 	.word	0x00001f3f

080004ac <MX_TSC_Init>:
  * @brief TSC Initialization Function
  * @param None
  * @retval None
  */
static void MX_TSC_Init(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TSC_Init 1 */

  /* USER CODE END TSC_Init 1 */
  /** Configure the TSC peripheral
  */
  htsc.Instance = TSC;
 80004b0:	4b1e      	ldr	r3, [pc, #120]	; (800052c <MX_TSC_Init+0x80>)
 80004b2:	4a1f      	ldr	r2, [pc, #124]	; (8000530 <MX_TSC_Init+0x84>)
 80004b4:	601a      	str	r2, [r3, #0]
  htsc.Init.CTPulseHighLength = TSC_CTPH_2CYCLES;
 80004b6:	4b1d      	ldr	r3, [pc, #116]	; (800052c <MX_TSC_Init+0x80>)
 80004b8:	2280      	movs	r2, #128	; 0x80
 80004ba:	0552      	lsls	r2, r2, #21
 80004bc:	605a      	str	r2, [r3, #4]
  htsc.Init.CTPulseLowLength = TSC_CTPL_2CYCLES;
 80004be:	4b1b      	ldr	r3, [pc, #108]	; (800052c <MX_TSC_Init+0x80>)
 80004c0:	2280      	movs	r2, #128	; 0x80
 80004c2:	0452      	lsls	r2, r2, #17
 80004c4:	609a      	str	r2, [r3, #8]
  htsc.Init.SpreadSpectrum = DISABLE;
 80004c6:	4b19      	ldr	r3, [pc, #100]	; (800052c <MX_TSC_Init+0x80>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	731a      	strb	r2, [r3, #12]
  htsc.Init.SpreadSpectrumDeviation = 1;
 80004cc:	4b17      	ldr	r3, [pc, #92]	; (800052c <MX_TSC_Init+0x80>)
 80004ce:	2201      	movs	r2, #1
 80004d0:	611a      	str	r2, [r3, #16]
  htsc.Init.SpreadSpectrumPrescaler = TSC_SS_PRESC_DIV1;
 80004d2:	4b16      	ldr	r3, [pc, #88]	; (800052c <MX_TSC_Init+0x80>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	615a      	str	r2, [r3, #20]
  htsc.Init.PulseGeneratorPrescaler = TSC_PG_PRESC_DIV4;
 80004d8:	4b14      	ldr	r3, [pc, #80]	; (800052c <MX_TSC_Init+0x80>)
 80004da:	2280      	movs	r2, #128	; 0x80
 80004dc:	0192      	lsls	r2, r2, #6
 80004de:	619a      	str	r2, [r3, #24]
  htsc.Init.MaxCountValue = TSC_MCV_8191;
 80004e0:	4b12      	ldr	r3, [pc, #72]	; (800052c <MX_TSC_Init+0x80>)
 80004e2:	22a0      	movs	r2, #160	; 0xa0
 80004e4:	61da      	str	r2, [r3, #28]
  htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
 80004e6:	4b11      	ldr	r3, [pc, #68]	; (800052c <MX_TSC_Init+0x80>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	621a      	str	r2, [r3, #32]
  htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
 80004ec:	4b0f      	ldr	r3, [pc, #60]	; (800052c <MX_TSC_Init+0x80>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	625a      	str	r2, [r3, #36]	; 0x24
  htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
 80004f2:	4b0e      	ldr	r3, [pc, #56]	; (800052c <MX_TSC_Init+0x80>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	629a      	str	r2, [r3, #40]	; 0x28
  htsc.Init.MaxCountInterrupt = DISABLE;
 80004f8:	4b0c      	ldr	r3, [pc, #48]	; (800052c <MX_TSC_Init+0x80>)
 80004fa:	222c      	movs	r2, #44	; 0x2c
 80004fc:	2100      	movs	r1, #0
 80004fe:	5499      	strb	r1, [r3, r2]
  htsc.Init.ChannelIOs = TSC_GROUP1_IO3|TSC_GROUP2_IO3|TSC_GROUP3_IO2;
 8000500:	4b0a      	ldr	r3, [pc, #40]	; (800052c <MX_TSC_Init+0x80>)
 8000502:	2291      	movs	r2, #145	; 0x91
 8000504:	0092      	lsls	r2, r2, #2
 8000506:	631a      	str	r2, [r3, #48]	; 0x30
  htsc.Init.ShieldIOs = 0;
 8000508:	4b08      	ldr	r3, [pc, #32]	; (800052c <MX_TSC_Init+0x80>)
 800050a:	2200      	movs	r2, #0
 800050c:	635a      	str	r2, [r3, #52]	; 0x34
  htsc.Init.SamplingIOs = TSC_GROUP1_IO4|TSC_GROUP2_IO4|TSC_GROUP3_IO3;
 800050e:	4b07      	ldr	r3, [pc, #28]	; (800052c <MX_TSC_Init+0x80>)
 8000510:	2291      	movs	r2, #145	; 0x91
 8000512:	00d2      	lsls	r2, r2, #3
 8000514:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_TSC_Init(&htsc) != HAL_OK)
 8000516:	4b05      	ldr	r3, [pc, #20]	; (800052c <MX_TSC_Init+0x80>)
 8000518:	0018      	movs	r0, r3
 800051a:	f002 f943 	bl	80027a4 <HAL_TSC_Init>
 800051e:	1e03      	subs	r3, r0, #0
 8000520:	d001      	beq.n	8000526 <MX_TSC_Init+0x7a>
  {
    Error_Handler();
 8000522:	f000 f8a9 	bl	8000678 <Error_Handler>
  }
  /* USER CODE BEGIN TSC_Init 2 */

  /* USER CODE END TSC_Init 2 */

}
 8000526:	46c0      	nop			; (mov r8, r8)
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	2000041c 	.word	0x2000041c
 8000530:	40024000 	.word	0x40024000

08000534 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000538:	4b0f      	ldr	r3, [pc, #60]	; (8000578 <MX_USB_PCD_Init+0x44>)
 800053a:	4a10      	ldr	r2, [pc, #64]	; (800057c <MX_USB_PCD_Init+0x48>)
 800053c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800053e:	4b0e      	ldr	r3, [pc, #56]	; (8000578 <MX_USB_PCD_Init+0x44>)
 8000540:	2208      	movs	r2, #8
 8000542:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000544:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <MX_USB_PCD_Init+0x44>)
 8000546:	2202      	movs	r2, #2
 8000548:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800054a:	4b0b      	ldr	r3, [pc, #44]	; (8000578 <MX_USB_PCD_Init+0x44>)
 800054c:	2202      	movs	r2, #2
 800054e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000550:	4b09      	ldr	r3, [pc, #36]	; (8000578 <MX_USB_PCD_Init+0x44>)
 8000552:	2200      	movs	r2, #0
 8000554:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000556:	4b08      	ldr	r3, [pc, #32]	; (8000578 <MX_USB_PCD_Init+0x44>)
 8000558:	2200      	movs	r2, #0
 800055a:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800055c:	4b06      	ldr	r3, [pc, #24]	; (8000578 <MX_USB_PCD_Init+0x44>)
 800055e:	2200      	movs	r2, #0
 8000560:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000562:	4b05      	ldr	r3, [pc, #20]	; (8000578 <MX_USB_PCD_Init+0x44>)
 8000564:	0018      	movs	r0, r3
 8000566:	f000 fea5 	bl	80012b4 <HAL_PCD_Init>
 800056a:	1e03      	subs	r3, r0, #0
 800056c:	d001      	beq.n	8000572 <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 800056e:	f000 f883 	bl	8000678 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000572:	46c0      	nop			; (mov r8, r8)
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	20000128 	.word	0x20000128
 800057c:	40005c00 	.word	0x40005c00

08000580 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000580:	b590      	push	{r4, r7, lr}
 8000582:	b089      	sub	sp, #36	; 0x24
 8000584:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000586:	240c      	movs	r4, #12
 8000588:	193b      	adds	r3, r7, r4
 800058a:	0018      	movs	r0, r3
 800058c:	2314      	movs	r3, #20
 800058e:	001a      	movs	r2, r3
 8000590:	2100      	movs	r1, #0
 8000592:	f002 fa17 	bl	80029c4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000596:	4b35      	ldr	r3, [pc, #212]	; (800066c <MX_GPIO_Init+0xec>)
 8000598:	695a      	ldr	r2, [r3, #20]
 800059a:	4b34      	ldr	r3, [pc, #208]	; (800066c <MX_GPIO_Init+0xec>)
 800059c:	2180      	movs	r1, #128	; 0x80
 800059e:	0309      	lsls	r1, r1, #12
 80005a0:	430a      	orrs	r2, r1
 80005a2:	615a      	str	r2, [r3, #20]
 80005a4:	4b31      	ldr	r3, [pc, #196]	; (800066c <MX_GPIO_Init+0xec>)
 80005a6:	695a      	ldr	r2, [r3, #20]
 80005a8:	2380      	movs	r3, #128	; 0x80
 80005aa:	031b      	lsls	r3, r3, #12
 80005ac:	4013      	ands	r3, r2
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b2:	4b2e      	ldr	r3, [pc, #184]	; (800066c <MX_GPIO_Init+0xec>)
 80005b4:	695a      	ldr	r2, [r3, #20]
 80005b6:	4b2d      	ldr	r3, [pc, #180]	; (800066c <MX_GPIO_Init+0xec>)
 80005b8:	2180      	movs	r1, #128	; 0x80
 80005ba:	0289      	lsls	r1, r1, #10
 80005bc:	430a      	orrs	r2, r1
 80005be:	615a      	str	r2, [r3, #20]
 80005c0:	4b2a      	ldr	r3, [pc, #168]	; (800066c <MX_GPIO_Init+0xec>)
 80005c2:	695a      	ldr	r2, [r3, #20]
 80005c4:	2380      	movs	r3, #128	; 0x80
 80005c6:	029b      	lsls	r3, r3, #10
 80005c8:	4013      	ands	r3, r2
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ce:	4b27      	ldr	r3, [pc, #156]	; (800066c <MX_GPIO_Init+0xec>)
 80005d0:	695a      	ldr	r2, [r3, #20]
 80005d2:	4b26      	ldr	r3, [pc, #152]	; (800066c <MX_GPIO_Init+0xec>)
 80005d4:	2180      	movs	r1, #128	; 0x80
 80005d6:	02c9      	lsls	r1, r1, #11
 80005d8:	430a      	orrs	r2, r1
 80005da:	615a      	str	r2, [r3, #20]
 80005dc:	4b23      	ldr	r3, [pc, #140]	; (800066c <MX_GPIO_Init+0xec>)
 80005de:	695a      	ldr	r2, [r3, #20]
 80005e0:	2380      	movs	r3, #128	; 0x80
 80005e2:	02db      	lsls	r3, r3, #11
 80005e4:	4013      	ands	r3, r2
 80005e6:	603b      	str	r3, [r7, #0]
 80005e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|EXT_RESET_Pin|LD3_Pin|LD6_Pin
 80005ea:	4921      	ldr	r1, [pc, #132]	; (8000670 <MX_GPIO_Init+0xf0>)
 80005ec:	4b21      	ldr	r3, [pc, #132]	; (8000674 <MX_GPIO_Init+0xf4>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	0018      	movs	r0, r3
 80005f2:	f000 fcf9 	bl	8000fe8 <HAL_GPIO_WritePin>
                          |LD4_Pin|LD5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin EXT_RESET_Pin LD3_Pin LD6_Pin
                           LD4_Pin LD5_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|EXT_RESET_Pin|LD3_Pin|LD6_Pin
 80005f6:	193b      	adds	r3, r7, r4
 80005f8:	4a1d      	ldr	r2, [pc, #116]	; (8000670 <MX_GPIO_Init+0xf0>)
 80005fa:	601a      	str	r2, [r3, #0]
                          |LD4_Pin|LD5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fc:	193b      	adds	r3, r7, r4
 80005fe:	2201      	movs	r2, #1
 8000600:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000602:	193b      	adds	r3, r7, r4
 8000604:	2200      	movs	r2, #0
 8000606:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000608:	193b      	adds	r3, r7, r4
 800060a:	2200      	movs	r2, #0
 800060c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800060e:	193b      	adds	r3, r7, r4
 8000610:	4a18      	ldr	r2, [pc, #96]	; (8000674 <MX_GPIO_Init+0xf4>)
 8000612:	0019      	movs	r1, r3
 8000614:	0010      	movs	r0, r2
 8000616:	f000 fb6f 	bl	8000cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin;
 800061a:	0021      	movs	r1, r4
 800061c:	187b      	adds	r3, r7, r1
 800061e:	2206      	movs	r2, #6
 8000620:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000622:	187b      	adds	r3, r7, r1
 8000624:	2290      	movs	r2, #144	; 0x90
 8000626:	0352      	lsls	r2, r2, #13
 8000628:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062a:	187b      	adds	r3, r7, r1
 800062c:	2200      	movs	r2, #0
 800062e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000630:	000c      	movs	r4, r1
 8000632:	187b      	adds	r3, r7, r1
 8000634:	4a0f      	ldr	r2, [pc, #60]	; (8000674 <MX_GPIO_Init+0xf4>)
 8000636:	0019      	movs	r1, r3
 8000638:	0010      	movs	r0, r2
 800063a:	f000 fb5d 	bl	8000cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800063e:	0021      	movs	r1, r4
 8000640:	187b      	adds	r3, r7, r1
 8000642:	2201      	movs	r2, #1
 8000644:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000646:	187b      	adds	r3, r7, r1
 8000648:	2290      	movs	r2, #144	; 0x90
 800064a:	0352      	lsls	r2, r2, #13
 800064c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064e:	187b      	adds	r3, r7, r1
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000654:	187a      	adds	r2, r7, r1
 8000656:	2390      	movs	r3, #144	; 0x90
 8000658:	05db      	lsls	r3, r3, #23
 800065a:	0011      	movs	r1, r2
 800065c:	0018      	movs	r0, r3
 800065e:	f000 fb4b 	bl	8000cf8 <HAL_GPIO_Init>

}
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	46bd      	mov	sp, r7
 8000666:	b009      	add	sp, #36	; 0x24
 8000668:	bd90      	pop	{r4, r7, pc}
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	40021000 	.word	0x40021000
 8000670:	000003e1 	.word	0x000003e1
 8000674:	48000800 	.word	0x48000800

08000678 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800067c:	b672      	cpsid	i
}
 800067e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000680:	e7fe      	b.n	8000680 <Error_Handler+0x8>
	...

08000684 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800068a:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <HAL_MspInit+0x44>)
 800068c:	699a      	ldr	r2, [r3, #24]
 800068e:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <HAL_MspInit+0x44>)
 8000690:	2101      	movs	r1, #1
 8000692:	430a      	orrs	r2, r1
 8000694:	619a      	str	r2, [r3, #24]
 8000696:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <HAL_MspInit+0x44>)
 8000698:	699b      	ldr	r3, [r3, #24]
 800069a:	2201      	movs	r2, #1
 800069c:	4013      	ands	r3, r2
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a2:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <HAL_MspInit+0x44>)
 80006a4:	69da      	ldr	r2, [r3, #28]
 80006a6:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <HAL_MspInit+0x44>)
 80006a8:	2180      	movs	r1, #128	; 0x80
 80006aa:	0549      	lsls	r1, r1, #21
 80006ac:	430a      	orrs	r2, r1
 80006ae:	61da      	str	r2, [r3, #28]
 80006b0:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <HAL_MspInit+0x44>)
 80006b2:	69da      	ldr	r2, [r3, #28]
 80006b4:	2380      	movs	r3, #128	; 0x80
 80006b6:	055b      	lsls	r3, r3, #21
 80006b8:	4013      	ands	r3, r2
 80006ba:	603b      	str	r3, [r7, #0]
 80006bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	46bd      	mov	sp, r7
 80006c2:	b002      	add	sp, #8
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	46c0      	nop			; (mov r8, r8)
 80006c8:	40021000 	.word	0x40021000

080006cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80006cc:	b590      	push	{r4, r7, lr}
 80006ce:	b08b      	sub	sp, #44	; 0x2c
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d4:	2414      	movs	r4, #20
 80006d6:	193b      	adds	r3, r7, r4
 80006d8:	0018      	movs	r0, r3
 80006da:	2314      	movs	r3, #20
 80006dc:	001a      	movs	r2, r3
 80006de:	2100      	movs	r1, #0
 80006e0:	f002 f970 	bl	80029c4 <memset>
  if(hi2c->Instance==I2C2)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a1c      	ldr	r2, [pc, #112]	; (800075c <HAL_I2C_MspInit+0x90>)
 80006ea:	4293      	cmp	r3, r2
 80006ec:	d132      	bne.n	8000754 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ee:	4b1c      	ldr	r3, [pc, #112]	; (8000760 <HAL_I2C_MspInit+0x94>)
 80006f0:	695a      	ldr	r2, [r3, #20]
 80006f2:	4b1b      	ldr	r3, [pc, #108]	; (8000760 <HAL_I2C_MspInit+0x94>)
 80006f4:	2180      	movs	r1, #128	; 0x80
 80006f6:	02c9      	lsls	r1, r1, #11
 80006f8:	430a      	orrs	r2, r1
 80006fa:	615a      	str	r2, [r3, #20]
 80006fc:	4b18      	ldr	r3, [pc, #96]	; (8000760 <HAL_I2C_MspInit+0x94>)
 80006fe:	695a      	ldr	r2, [r3, #20]
 8000700:	2380      	movs	r3, #128	; 0x80
 8000702:	02db      	lsls	r3, r3, #11
 8000704:	4013      	ands	r3, r2
 8000706:	613b      	str	r3, [r7, #16]
 8000708:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = I2C2_SCL_Pin|I2C2_SDA_Pin;
 800070a:	193b      	adds	r3, r7, r4
 800070c:	22c0      	movs	r2, #192	; 0xc0
 800070e:	0112      	lsls	r2, r2, #4
 8000710:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000712:	0021      	movs	r1, r4
 8000714:	187b      	adds	r3, r7, r1
 8000716:	2212      	movs	r2, #18
 8000718:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800071a:	187b      	adds	r3, r7, r1
 800071c:	2201      	movs	r2, #1
 800071e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000720:	187b      	adds	r3, r7, r1
 8000722:	2203      	movs	r2, #3
 8000724:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C2;
 8000726:	187b      	adds	r3, r7, r1
 8000728:	2201      	movs	r2, #1
 800072a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800072c:	187b      	adds	r3, r7, r1
 800072e:	4a0d      	ldr	r2, [pc, #52]	; (8000764 <HAL_I2C_MspInit+0x98>)
 8000730:	0019      	movs	r1, r3
 8000732:	0010      	movs	r0, r2
 8000734:	f000 fae0 	bl	8000cf8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000738:	4b09      	ldr	r3, [pc, #36]	; (8000760 <HAL_I2C_MspInit+0x94>)
 800073a:	69da      	ldr	r2, [r3, #28]
 800073c:	4b08      	ldr	r3, [pc, #32]	; (8000760 <HAL_I2C_MspInit+0x94>)
 800073e:	2180      	movs	r1, #128	; 0x80
 8000740:	03c9      	lsls	r1, r1, #15
 8000742:	430a      	orrs	r2, r1
 8000744:	61da      	str	r2, [r3, #28]
 8000746:	4b06      	ldr	r3, [pc, #24]	; (8000760 <HAL_I2C_MspInit+0x94>)
 8000748:	69da      	ldr	r2, [r3, #28]
 800074a:	2380      	movs	r3, #128	; 0x80
 800074c:	03db      	lsls	r3, r3, #15
 800074e:	4013      	ands	r3, r2
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000754:	46c0      	nop			; (mov r8, r8)
 8000756:	46bd      	mov	sp, r7
 8000758:	b00b      	add	sp, #44	; 0x2c
 800075a:	bd90      	pop	{r4, r7, pc}
 800075c:	40005800 	.word	0x40005800
 8000760:	40021000 	.word	0x40021000
 8000764:	48000400 	.word	0x48000400

08000768 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000768:	b590      	push	{r4, r7, lr}
 800076a:	b08b      	sub	sp, #44	; 0x2c
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000770:	2414      	movs	r4, #20
 8000772:	193b      	adds	r3, r7, r4
 8000774:	0018      	movs	r0, r3
 8000776:	2314      	movs	r3, #20
 8000778:	001a      	movs	r2, r3
 800077a:	2100      	movs	r1, #0
 800077c:	f002 f922 	bl	80029c4 <memset>
  if(hspi->Instance==SPI2)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a1c      	ldr	r2, [pc, #112]	; (80007f8 <HAL_SPI_MspInit+0x90>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d132      	bne.n	80007f0 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800078a:	4b1c      	ldr	r3, [pc, #112]	; (80007fc <HAL_SPI_MspInit+0x94>)
 800078c:	69da      	ldr	r2, [r3, #28]
 800078e:	4b1b      	ldr	r3, [pc, #108]	; (80007fc <HAL_SPI_MspInit+0x94>)
 8000790:	2180      	movs	r1, #128	; 0x80
 8000792:	01c9      	lsls	r1, r1, #7
 8000794:	430a      	orrs	r2, r1
 8000796:	61da      	str	r2, [r3, #28]
 8000798:	4b18      	ldr	r3, [pc, #96]	; (80007fc <HAL_SPI_MspInit+0x94>)
 800079a:	69da      	ldr	r2, [r3, #28]
 800079c:	2380      	movs	r3, #128	; 0x80
 800079e:	01db      	lsls	r3, r3, #7
 80007a0:	4013      	ands	r3, r2
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a6:	4b15      	ldr	r3, [pc, #84]	; (80007fc <HAL_SPI_MspInit+0x94>)
 80007a8:	695a      	ldr	r2, [r3, #20]
 80007aa:	4b14      	ldr	r3, [pc, #80]	; (80007fc <HAL_SPI_MspInit+0x94>)
 80007ac:	2180      	movs	r1, #128	; 0x80
 80007ae:	02c9      	lsls	r1, r1, #11
 80007b0:	430a      	orrs	r2, r1
 80007b2:	615a      	str	r2, [r3, #20]
 80007b4:	4b11      	ldr	r3, [pc, #68]	; (80007fc <HAL_SPI_MspInit+0x94>)
 80007b6:	695a      	ldr	r2, [r3, #20]
 80007b8:	2380      	movs	r3, #128	; 0x80
 80007ba:	02db      	lsls	r3, r3, #11
 80007bc:	4013      	ands	r3, r2
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SPI2_SCK_Pin|SPI2_MISO_Pin|SPI2_MOSI_Pin;
 80007c2:	193b      	adds	r3, r7, r4
 80007c4:	22e0      	movs	r2, #224	; 0xe0
 80007c6:	0212      	lsls	r2, r2, #8
 80007c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ca:	0021      	movs	r1, r4
 80007cc:	187b      	adds	r3, r7, r1
 80007ce:	2202      	movs	r2, #2
 80007d0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	187b      	adds	r3, r7, r1
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007d8:	187b      	adds	r3, r7, r1
 80007da:	2203      	movs	r2, #3
 80007dc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80007de:	187b      	adds	r3, r7, r1
 80007e0:	2200      	movs	r2, #0
 80007e2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e4:	187b      	adds	r3, r7, r1
 80007e6:	4a06      	ldr	r2, [pc, #24]	; (8000800 <HAL_SPI_MspInit+0x98>)
 80007e8:	0019      	movs	r1, r3
 80007ea:	0010      	movs	r0, r2
 80007ec:	f000 fa84 	bl	8000cf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80007f0:	46c0      	nop			; (mov r8, r8)
 80007f2:	46bd      	mov	sp, r7
 80007f4:	b00b      	add	sp, #44	; 0x2c
 80007f6:	bd90      	pop	{r4, r7, pc}
 80007f8:	40003800 	.word	0x40003800
 80007fc:	40021000 	.word	0x40021000
 8000800:	48000400 	.word	0x48000400

08000804 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a0d      	ldr	r2, [pc, #52]	; (8000848 <HAL_TIM_Base_MspInit+0x44>)
 8000812:	4293      	cmp	r3, r2
 8000814:	d113      	bne.n	800083e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000816:	4b0d      	ldr	r3, [pc, #52]	; (800084c <HAL_TIM_Base_MspInit+0x48>)
 8000818:	69da      	ldr	r2, [r3, #28]
 800081a:	4b0c      	ldr	r3, [pc, #48]	; (800084c <HAL_TIM_Base_MspInit+0x48>)
 800081c:	2110      	movs	r1, #16
 800081e:	430a      	orrs	r2, r1
 8000820:	61da      	str	r2, [r3, #28]
 8000822:	4b0a      	ldr	r3, [pc, #40]	; (800084c <HAL_TIM_Base_MspInit+0x48>)
 8000824:	69db      	ldr	r3, [r3, #28]
 8000826:	2210      	movs	r2, #16
 8000828:	4013      	ands	r3, r2
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800082e:	2200      	movs	r2, #0
 8000830:	2100      	movs	r1, #0
 8000832:	2011      	movs	r0, #17
 8000834:	f000 fa2e 	bl	8000c94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000838:	2011      	movs	r0, #17
 800083a:	f000 fa40 	bl	8000cbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800083e:	46c0      	nop			; (mov r8, r8)
 8000840:	46bd      	mov	sp, r7
 8000842:	b004      	add	sp, #16
 8000844:	bd80      	pop	{r7, pc}
 8000846:	46c0      	nop			; (mov r8, r8)
 8000848:	40001000 	.word	0x40001000
 800084c:	40021000 	.word	0x40021000

08000850 <HAL_TSC_MspInit>:
* This function configures the hardware resources used in this example
* @param htsc: TSC handle pointer
* @retval None
*/
void HAL_TSC_MspInit(TSC_HandleTypeDef* htsc)
{
 8000850:	b590      	push	{r4, r7, lr}
 8000852:	b08b      	sub	sp, #44	; 0x2c
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000858:	2414      	movs	r4, #20
 800085a:	193b      	adds	r3, r7, r4
 800085c:	0018      	movs	r0, r3
 800085e:	2314      	movs	r3, #20
 8000860:	001a      	movs	r2, r3
 8000862:	2100      	movs	r1, #0
 8000864:	f002 f8ae 	bl	80029c4 <memset>
  if(htsc->Instance==TSC)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a44      	ldr	r2, [pc, #272]	; (8000980 <HAL_TSC_MspInit+0x130>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d000      	beq.n	8000874 <HAL_TSC_MspInit+0x24>
 8000872:	e080      	b.n	8000976 <HAL_TSC_MspInit+0x126>
  {
  /* USER CODE BEGIN TSC_MspInit 0 */

  /* USER CODE END TSC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TSC_CLK_ENABLE();
 8000874:	4b43      	ldr	r3, [pc, #268]	; (8000984 <HAL_TSC_MspInit+0x134>)
 8000876:	695a      	ldr	r2, [r3, #20]
 8000878:	4b42      	ldr	r3, [pc, #264]	; (8000984 <HAL_TSC_MspInit+0x134>)
 800087a:	2180      	movs	r1, #128	; 0x80
 800087c:	0449      	lsls	r1, r1, #17
 800087e:	430a      	orrs	r2, r1
 8000880:	615a      	str	r2, [r3, #20]
 8000882:	4b40      	ldr	r3, [pc, #256]	; (8000984 <HAL_TSC_MspInit+0x134>)
 8000884:	695a      	ldr	r2, [r3, #20]
 8000886:	2380      	movs	r3, #128	; 0x80
 8000888:	045b      	lsls	r3, r3, #17
 800088a:	4013      	ands	r3, r2
 800088c:	613b      	str	r3, [r7, #16]
 800088e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000890:	4b3c      	ldr	r3, [pc, #240]	; (8000984 <HAL_TSC_MspInit+0x134>)
 8000892:	695a      	ldr	r2, [r3, #20]
 8000894:	4b3b      	ldr	r3, [pc, #236]	; (8000984 <HAL_TSC_MspInit+0x134>)
 8000896:	2180      	movs	r1, #128	; 0x80
 8000898:	0289      	lsls	r1, r1, #10
 800089a:	430a      	orrs	r2, r1
 800089c:	615a      	str	r2, [r3, #20]
 800089e:	4b39      	ldr	r3, [pc, #228]	; (8000984 <HAL_TSC_MspInit+0x134>)
 80008a0:	695a      	ldr	r2, [r3, #20]
 80008a2:	2380      	movs	r3, #128	; 0x80
 80008a4:	029b      	lsls	r3, r3, #10
 80008a6:	4013      	ands	r3, r2
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ac:	4b35      	ldr	r3, [pc, #212]	; (8000984 <HAL_TSC_MspInit+0x134>)
 80008ae:	695a      	ldr	r2, [r3, #20]
 80008b0:	4b34      	ldr	r3, [pc, #208]	; (8000984 <HAL_TSC_MspInit+0x134>)
 80008b2:	2180      	movs	r1, #128	; 0x80
 80008b4:	02c9      	lsls	r1, r1, #11
 80008b6:	430a      	orrs	r2, r1
 80008b8:	615a      	str	r2, [r3, #20]
 80008ba:	4b32      	ldr	r3, [pc, #200]	; (8000984 <HAL_TSC_MspInit+0x134>)
 80008bc:	695a      	ldr	r2, [r3, #20]
 80008be:	2380      	movs	r3, #128	; 0x80
 80008c0:	02db      	lsls	r3, r3, #11
 80008c2:	4013      	ands	r3, r2
 80008c4:	60bb      	str	r3, [r7, #8]
 80008c6:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TSC_G2_IO3
    PA7     ------> TSC_G2_IO4
    PB0     ------> TSC_G3_IO2
    PB1     ------> TSC_G3_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 80008c8:	193b      	adds	r3, r7, r4
 80008ca:	2244      	movs	r2, #68	; 0x44
 80008cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ce:	193b      	adds	r3, r7, r4
 80008d0:	2202      	movs	r2, #2
 80008d2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	193b      	adds	r3, r7, r4
 80008d6:	2200      	movs	r2, #0
 80008d8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008da:	193b      	adds	r3, r7, r4
 80008dc:	2200      	movs	r2, #0
 80008de:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 80008e0:	193b      	adds	r3, r7, r4
 80008e2:	2203      	movs	r2, #3
 80008e4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e6:	193a      	adds	r2, r7, r4
 80008e8:	2390      	movs	r3, #144	; 0x90
 80008ea:	05db      	lsls	r3, r3, #23
 80008ec:	0011      	movs	r1, r2
 80008ee:	0018      	movs	r0, r3
 80008f0:	f000 fa02 	bl	8000cf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7;
 80008f4:	193b      	adds	r3, r7, r4
 80008f6:	2288      	movs	r2, #136	; 0x88
 80008f8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008fa:	193b      	adds	r3, r7, r4
 80008fc:	2212      	movs	r2, #18
 80008fe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	193b      	adds	r3, r7, r4
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000906:	193b      	adds	r3, r7, r4
 8000908:	2200      	movs	r2, #0
 800090a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 800090c:	193b      	adds	r3, r7, r4
 800090e:	2203      	movs	r2, #3
 8000910:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000912:	193a      	adds	r2, r7, r4
 8000914:	2390      	movs	r3, #144	; 0x90
 8000916:	05db      	lsls	r3, r3, #23
 8000918:	0011      	movs	r1, r2
 800091a:	0018      	movs	r0, r3
 800091c:	f000 f9ec 	bl	8000cf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000920:	193b      	adds	r3, r7, r4
 8000922:	2201      	movs	r2, #1
 8000924:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000926:	193b      	adds	r3, r7, r4
 8000928:	2202      	movs	r2, #2
 800092a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	193b      	adds	r3, r7, r4
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000932:	193b      	adds	r3, r7, r4
 8000934:	2200      	movs	r2, #0
 8000936:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000938:	193b      	adds	r3, r7, r4
 800093a:	2203      	movs	r2, #3
 800093c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800093e:	193b      	adds	r3, r7, r4
 8000940:	4a11      	ldr	r2, [pc, #68]	; (8000988 <HAL_TSC_MspInit+0x138>)
 8000942:	0019      	movs	r1, r3
 8000944:	0010      	movs	r0, r2
 8000946:	f000 f9d7 	bl	8000cf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800094a:	0021      	movs	r1, r4
 800094c:	187b      	adds	r3, r7, r1
 800094e:	2202      	movs	r2, #2
 8000950:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000952:	187b      	adds	r3, r7, r1
 8000954:	2212      	movs	r2, #18
 8000956:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	187b      	adds	r3, r7, r1
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095e:	187b      	adds	r3, r7, r1
 8000960:	2200      	movs	r2, #0
 8000962:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000964:	187b      	adds	r3, r7, r1
 8000966:	2203      	movs	r2, #3
 8000968:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800096a:	187b      	adds	r3, r7, r1
 800096c:	4a06      	ldr	r2, [pc, #24]	; (8000988 <HAL_TSC_MspInit+0x138>)
 800096e:	0019      	movs	r1, r3
 8000970:	0010      	movs	r0, r2
 8000972:	f000 f9c1 	bl	8000cf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TSC_MspInit 1 */

  /* USER CODE END TSC_MspInit 1 */
  }

}
 8000976:	46c0      	nop			; (mov r8, r8)
 8000978:	46bd      	mov	sp, r7
 800097a:	b00b      	add	sp, #44	; 0x2c
 800097c:	bd90      	pop	{r4, r7, pc}
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	40024000 	.word	0x40024000
 8000984:	40021000 	.word	0x40021000
 8000988:	48000400 	.word	0x48000400

0800098c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a0a      	ldr	r2, [pc, #40]	; (80009c4 <HAL_PCD_MspInit+0x38>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d10d      	bne.n	80009ba <HAL_PCD_MspInit+0x2e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800099e:	4b0a      	ldr	r3, [pc, #40]	; (80009c8 <HAL_PCD_MspInit+0x3c>)
 80009a0:	69da      	ldr	r2, [r3, #28]
 80009a2:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <HAL_PCD_MspInit+0x3c>)
 80009a4:	2180      	movs	r1, #128	; 0x80
 80009a6:	0409      	lsls	r1, r1, #16
 80009a8:	430a      	orrs	r2, r1
 80009aa:	61da      	str	r2, [r3, #28]
 80009ac:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <HAL_PCD_MspInit+0x3c>)
 80009ae:	69da      	ldr	r2, [r3, #28]
 80009b0:	2380      	movs	r3, #128	; 0x80
 80009b2:	041b      	lsls	r3, r3, #16
 80009b4:	4013      	ands	r3, r2
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80009ba:	46c0      	nop			; (mov r8, r8)
 80009bc:	46bd      	mov	sp, r7
 80009be:	b004      	add	sp, #16
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	46c0      	nop			; (mov r8, r8)
 80009c4:	40005c00 	.word	0x40005c00
 80009c8:	40021000 	.word	0x40021000

080009cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <NMI_Handler+0x4>

080009d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d2:	b580      	push	{r7, lr}
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d6:	e7fe      	b.n	80009d6 <HardFault_Handler+0x4>

080009d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009dc:	46c0      	nop			; (mov r8, r8)
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009e2:	b580      	push	{r7, lr}
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009e6:	46c0      	nop			; (mov r8, r8)
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}

080009ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009f0:	f000 f888 	bl	8000b04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009f4:	46c0      	nop			; (mov r8, r8)
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
	...

080009fc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a00:	4b03      	ldr	r3, [pc, #12]	; (8000a10 <TIM6_DAC_IRQHandler+0x14>)
 8000a02:	0018      	movs	r0, r3
 8000a04:	f001 fca2 	bl	800234c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a08:	46c0      	nop			; (mov r8, r8)
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	46c0      	nop			; (mov r8, r8)
 8000a10:	200000e0 	.word	0x200000e0

08000a14 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000a18:	46c0      	nop			; (mov r8, r8)
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
	...

08000a20 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a20:	480d      	ldr	r0, [pc, #52]	; (8000a58 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a22:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a24:	f7ff fff6 	bl	8000a14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a28:	480c      	ldr	r0, [pc, #48]	; (8000a5c <LoopForever+0x6>)
  ldr r1, =_edata
 8000a2a:	490d      	ldr	r1, [pc, #52]	; (8000a60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a2c:	4a0d      	ldr	r2, [pc, #52]	; (8000a64 <LoopForever+0xe>)
  movs r3, #0
 8000a2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a30:	e002      	b.n	8000a38 <LoopCopyDataInit>

08000a32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a36:	3304      	adds	r3, #4

08000a38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a3c:	d3f9      	bcc.n	8000a32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a3e:	4a0a      	ldr	r2, [pc, #40]	; (8000a68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a40:	4c0a      	ldr	r4, [pc, #40]	; (8000a6c <LoopForever+0x16>)
  movs r3, #0
 8000a42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a44:	e001      	b.n	8000a4a <LoopFillZerobss>

08000a46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a48:	3204      	adds	r2, #4

08000a4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a4c:	d3fb      	bcc.n	8000a46 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a4e:	f001 ff95 	bl	800297c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a52:	f7ff fbe5 	bl	8000220 <main>

08000a56 <LoopForever>:

LoopForever:
    b LoopForever
 8000a56:	e7fe      	b.n	8000a56 <LoopForever>
  ldr   r0, =_estack
 8000a58:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000a5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a60:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a64:	08002a24 	.word	0x08002a24
  ldr r2, =_sbss
 8000a68:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a6c:	20000464 	.word	0x20000464

08000a70 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a70:	e7fe      	b.n	8000a70 <ADC1_COMP_IRQHandler>
	...

08000a74 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a78:	4b07      	ldr	r3, [pc, #28]	; (8000a98 <HAL_Init+0x24>)
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <HAL_Init+0x24>)
 8000a7e:	2110      	movs	r1, #16
 8000a80:	430a      	orrs	r2, r1
 8000a82:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000a84:	2000      	movs	r0, #0
 8000a86:	f000 f809 	bl	8000a9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a8a:	f7ff fdfb 	bl	8000684 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a8e:	2300      	movs	r3, #0
}
 8000a90:	0018      	movs	r0, r3
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	40022000 	.word	0x40022000

08000a9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a9c:	b590      	push	{r4, r7, lr}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aa4:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <HAL_InitTick+0x5c>)
 8000aa6:	681c      	ldr	r4, [r3, #0]
 8000aa8:	4b14      	ldr	r3, [pc, #80]	; (8000afc <HAL_InitTick+0x60>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	0019      	movs	r1, r3
 8000aae:	23fa      	movs	r3, #250	; 0xfa
 8000ab0:	0098      	lsls	r0, r3, #2
 8000ab2:	f7ff fb29 	bl	8000108 <__udivsi3>
 8000ab6:	0003      	movs	r3, r0
 8000ab8:	0019      	movs	r1, r3
 8000aba:	0020      	movs	r0, r4
 8000abc:	f7ff fb24 	bl	8000108 <__udivsi3>
 8000ac0:	0003      	movs	r3, r0
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	f000 f90b 	bl	8000cde <HAL_SYSTICK_Config>
 8000ac8:	1e03      	subs	r3, r0, #0
 8000aca:	d001      	beq.n	8000ad0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000acc:	2301      	movs	r3, #1
 8000ace:	e00f      	b.n	8000af0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2b03      	cmp	r3, #3
 8000ad4:	d80b      	bhi.n	8000aee <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ad6:	6879      	ldr	r1, [r7, #4]
 8000ad8:	2301      	movs	r3, #1
 8000ada:	425b      	negs	r3, r3
 8000adc:	2200      	movs	r2, #0
 8000ade:	0018      	movs	r0, r3
 8000ae0:	f000 f8d8 	bl	8000c94 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ae4:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <HAL_InitTick+0x64>)
 8000ae6:	687a      	ldr	r2, [r7, #4]
 8000ae8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000aea:	2300      	movs	r3, #0
 8000aec:	e000      	b.n	8000af0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000aee:	2301      	movs	r3, #1
}
 8000af0:	0018      	movs	r0, r3
 8000af2:	46bd      	mov	sp, r7
 8000af4:	b003      	add	sp, #12
 8000af6:	bd90      	pop	{r4, r7, pc}
 8000af8:	20000000 	.word	0x20000000
 8000afc:	20000008 	.word	0x20000008
 8000b00:	20000004 	.word	0x20000004

08000b04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b08:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <HAL_IncTick+0x1c>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	001a      	movs	r2, r3
 8000b0e:	4b05      	ldr	r3, [pc, #20]	; (8000b24 <HAL_IncTick+0x20>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	18d2      	adds	r2, r2, r3
 8000b14:	4b03      	ldr	r3, [pc, #12]	; (8000b24 <HAL_IncTick+0x20>)
 8000b16:	601a      	str	r2, [r3, #0]
}
 8000b18:	46c0      	nop			; (mov r8, r8)
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	46c0      	nop			; (mov r8, r8)
 8000b20:	20000008 	.word	0x20000008
 8000b24:	20000460 	.word	0x20000460

08000b28 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b2c:	4b02      	ldr	r3, [pc, #8]	; (8000b38 <HAL_GetTick+0x10>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
}
 8000b30:	0018      	movs	r0, r3
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	46c0      	nop			; (mov r8, r8)
 8000b38:	20000460 	.word	0x20000460

08000b3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	0002      	movs	r2, r0
 8000b44:	1dfb      	adds	r3, r7, #7
 8000b46:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b48:	1dfb      	adds	r3, r7, #7
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	2b7f      	cmp	r3, #127	; 0x7f
 8000b4e:	d809      	bhi.n	8000b64 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b50:	1dfb      	adds	r3, r7, #7
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	001a      	movs	r2, r3
 8000b56:	231f      	movs	r3, #31
 8000b58:	401a      	ands	r2, r3
 8000b5a:	4b04      	ldr	r3, [pc, #16]	; (8000b6c <__NVIC_EnableIRQ+0x30>)
 8000b5c:	2101      	movs	r1, #1
 8000b5e:	4091      	lsls	r1, r2
 8000b60:	000a      	movs	r2, r1
 8000b62:	601a      	str	r2, [r3, #0]
  }
}
 8000b64:	46c0      	nop			; (mov r8, r8)
 8000b66:	46bd      	mov	sp, r7
 8000b68:	b002      	add	sp, #8
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	e000e100 	.word	0xe000e100

08000b70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b70:	b590      	push	{r4, r7, lr}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	0002      	movs	r2, r0
 8000b78:	6039      	str	r1, [r7, #0]
 8000b7a:	1dfb      	adds	r3, r7, #7
 8000b7c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b7e:	1dfb      	adds	r3, r7, #7
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	2b7f      	cmp	r3, #127	; 0x7f
 8000b84:	d828      	bhi.n	8000bd8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b86:	4a2f      	ldr	r2, [pc, #188]	; (8000c44 <__NVIC_SetPriority+0xd4>)
 8000b88:	1dfb      	adds	r3, r7, #7
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	b25b      	sxtb	r3, r3
 8000b8e:	089b      	lsrs	r3, r3, #2
 8000b90:	33c0      	adds	r3, #192	; 0xc0
 8000b92:	009b      	lsls	r3, r3, #2
 8000b94:	589b      	ldr	r3, [r3, r2]
 8000b96:	1dfa      	adds	r2, r7, #7
 8000b98:	7812      	ldrb	r2, [r2, #0]
 8000b9a:	0011      	movs	r1, r2
 8000b9c:	2203      	movs	r2, #3
 8000b9e:	400a      	ands	r2, r1
 8000ba0:	00d2      	lsls	r2, r2, #3
 8000ba2:	21ff      	movs	r1, #255	; 0xff
 8000ba4:	4091      	lsls	r1, r2
 8000ba6:	000a      	movs	r2, r1
 8000ba8:	43d2      	mvns	r2, r2
 8000baa:	401a      	ands	r2, r3
 8000bac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	019b      	lsls	r3, r3, #6
 8000bb2:	22ff      	movs	r2, #255	; 0xff
 8000bb4:	401a      	ands	r2, r3
 8000bb6:	1dfb      	adds	r3, r7, #7
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	0018      	movs	r0, r3
 8000bbc:	2303      	movs	r3, #3
 8000bbe:	4003      	ands	r3, r0
 8000bc0:	00db      	lsls	r3, r3, #3
 8000bc2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bc4:	481f      	ldr	r0, [pc, #124]	; (8000c44 <__NVIC_SetPriority+0xd4>)
 8000bc6:	1dfb      	adds	r3, r7, #7
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	b25b      	sxtb	r3, r3
 8000bcc:	089b      	lsrs	r3, r3, #2
 8000bce:	430a      	orrs	r2, r1
 8000bd0:	33c0      	adds	r3, #192	; 0xc0
 8000bd2:	009b      	lsls	r3, r3, #2
 8000bd4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000bd6:	e031      	b.n	8000c3c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bd8:	4a1b      	ldr	r2, [pc, #108]	; (8000c48 <__NVIC_SetPriority+0xd8>)
 8000bda:	1dfb      	adds	r3, r7, #7
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	0019      	movs	r1, r3
 8000be0:	230f      	movs	r3, #15
 8000be2:	400b      	ands	r3, r1
 8000be4:	3b08      	subs	r3, #8
 8000be6:	089b      	lsrs	r3, r3, #2
 8000be8:	3306      	adds	r3, #6
 8000bea:	009b      	lsls	r3, r3, #2
 8000bec:	18d3      	adds	r3, r2, r3
 8000bee:	3304      	adds	r3, #4
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	1dfa      	adds	r2, r7, #7
 8000bf4:	7812      	ldrb	r2, [r2, #0]
 8000bf6:	0011      	movs	r1, r2
 8000bf8:	2203      	movs	r2, #3
 8000bfa:	400a      	ands	r2, r1
 8000bfc:	00d2      	lsls	r2, r2, #3
 8000bfe:	21ff      	movs	r1, #255	; 0xff
 8000c00:	4091      	lsls	r1, r2
 8000c02:	000a      	movs	r2, r1
 8000c04:	43d2      	mvns	r2, r2
 8000c06:	401a      	ands	r2, r3
 8000c08:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	019b      	lsls	r3, r3, #6
 8000c0e:	22ff      	movs	r2, #255	; 0xff
 8000c10:	401a      	ands	r2, r3
 8000c12:	1dfb      	adds	r3, r7, #7
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	0018      	movs	r0, r3
 8000c18:	2303      	movs	r3, #3
 8000c1a:	4003      	ands	r3, r0
 8000c1c:	00db      	lsls	r3, r3, #3
 8000c1e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c20:	4809      	ldr	r0, [pc, #36]	; (8000c48 <__NVIC_SetPriority+0xd8>)
 8000c22:	1dfb      	adds	r3, r7, #7
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	001c      	movs	r4, r3
 8000c28:	230f      	movs	r3, #15
 8000c2a:	4023      	ands	r3, r4
 8000c2c:	3b08      	subs	r3, #8
 8000c2e:	089b      	lsrs	r3, r3, #2
 8000c30:	430a      	orrs	r2, r1
 8000c32:	3306      	adds	r3, #6
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	18c3      	adds	r3, r0, r3
 8000c38:	3304      	adds	r3, #4
 8000c3a:	601a      	str	r2, [r3, #0]
}
 8000c3c:	46c0      	nop			; (mov r8, r8)
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	b003      	add	sp, #12
 8000c42:	bd90      	pop	{r4, r7, pc}
 8000c44:	e000e100 	.word	0xe000e100
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	1e5a      	subs	r2, r3, #1
 8000c58:	2380      	movs	r3, #128	; 0x80
 8000c5a:	045b      	lsls	r3, r3, #17
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d301      	bcc.n	8000c64 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c60:	2301      	movs	r3, #1
 8000c62:	e010      	b.n	8000c86 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c64:	4b0a      	ldr	r3, [pc, #40]	; (8000c90 <SysTick_Config+0x44>)
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	3a01      	subs	r2, #1
 8000c6a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	425b      	negs	r3, r3
 8000c70:	2103      	movs	r1, #3
 8000c72:	0018      	movs	r0, r3
 8000c74:	f7ff ff7c 	bl	8000b70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c78:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <SysTick_Config+0x44>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c7e:	4b04      	ldr	r3, [pc, #16]	; (8000c90 <SysTick_Config+0x44>)
 8000c80:	2207      	movs	r2, #7
 8000c82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c84:	2300      	movs	r3, #0
}
 8000c86:	0018      	movs	r0, r3
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	b002      	add	sp, #8
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	46c0      	nop			; (mov r8, r8)
 8000c90:	e000e010 	.word	0xe000e010

08000c94 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	60b9      	str	r1, [r7, #8]
 8000c9c:	607a      	str	r2, [r7, #4]
 8000c9e:	210f      	movs	r1, #15
 8000ca0:	187b      	adds	r3, r7, r1
 8000ca2:	1c02      	adds	r2, r0, #0
 8000ca4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000ca6:	68ba      	ldr	r2, [r7, #8]
 8000ca8:	187b      	adds	r3, r7, r1
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	b25b      	sxtb	r3, r3
 8000cae:	0011      	movs	r1, r2
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	f7ff ff5d 	bl	8000b70 <__NVIC_SetPriority>
}
 8000cb6:	46c0      	nop			; (mov r8, r8)
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	b004      	add	sp, #16
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b082      	sub	sp, #8
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	0002      	movs	r2, r0
 8000cc6:	1dfb      	adds	r3, r7, #7
 8000cc8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cca:	1dfb      	adds	r3, r7, #7
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	b25b      	sxtb	r3, r3
 8000cd0:	0018      	movs	r0, r3
 8000cd2:	f7ff ff33 	bl	8000b3c <__NVIC_EnableIRQ>
}
 8000cd6:	46c0      	nop			; (mov r8, r8)
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	b002      	add	sp, #8
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b082      	sub	sp, #8
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	0018      	movs	r0, r3
 8000cea:	f7ff ffaf 	bl	8000c4c <SysTick_Config>
 8000cee:	0003      	movs	r3, r0
}
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	b002      	add	sp, #8
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b086      	sub	sp, #24
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
 8000d00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d02:	2300      	movs	r3, #0
 8000d04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d06:	e155      	b.n	8000fb4 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2101      	movs	r1, #1
 8000d0e:	697a      	ldr	r2, [r7, #20]
 8000d10:	4091      	lsls	r1, r2
 8000d12:	000a      	movs	r2, r1
 8000d14:	4013      	ands	r3, r2
 8000d16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d100      	bne.n	8000d20 <HAL_GPIO_Init+0x28>
 8000d1e:	e146      	b.n	8000fae <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	2203      	movs	r2, #3
 8000d26:	4013      	ands	r3, r2
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d005      	beq.n	8000d38 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	2203      	movs	r2, #3
 8000d32:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d34:	2b02      	cmp	r3, #2
 8000d36:	d130      	bne.n	8000d9a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	689b      	ldr	r3, [r3, #8]
 8000d3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	2203      	movs	r2, #3
 8000d44:	409a      	lsls	r2, r3
 8000d46:	0013      	movs	r3, r2
 8000d48:	43da      	mvns	r2, r3
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	68da      	ldr	r2, [r3, #12]
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	409a      	lsls	r2, r3
 8000d5a:	0013      	movs	r3, r2
 8000d5c:	693a      	ldr	r2, [r7, #16]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	693a      	ldr	r2, [r7, #16]
 8000d66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d6e:	2201      	movs	r2, #1
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	409a      	lsls	r2, r3
 8000d74:	0013      	movs	r3, r2
 8000d76:	43da      	mvns	r2, r3
 8000d78:	693b      	ldr	r3, [r7, #16]
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	091b      	lsrs	r3, r3, #4
 8000d84:	2201      	movs	r2, #1
 8000d86:	401a      	ands	r2, r3
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	409a      	lsls	r2, r3
 8000d8c:	0013      	movs	r3, r2
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	2203      	movs	r2, #3
 8000da0:	4013      	ands	r3, r2
 8000da2:	2b03      	cmp	r3, #3
 8000da4:	d017      	beq.n	8000dd6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	68db      	ldr	r3, [r3, #12]
 8000daa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	2203      	movs	r2, #3
 8000db2:	409a      	lsls	r2, r3
 8000db4:	0013      	movs	r3, r2
 8000db6:	43da      	mvns	r2, r3
 8000db8:	693b      	ldr	r3, [r7, #16]
 8000dba:	4013      	ands	r3, r2
 8000dbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	689a      	ldr	r2, [r3, #8]
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	409a      	lsls	r2, r3
 8000dc8:	0013      	movs	r3, r2
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	2203      	movs	r2, #3
 8000ddc:	4013      	ands	r3, r2
 8000dde:	2b02      	cmp	r3, #2
 8000de0:	d123      	bne.n	8000e2a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	08da      	lsrs	r2, r3, #3
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	3208      	adds	r2, #8
 8000dea:	0092      	lsls	r2, r2, #2
 8000dec:	58d3      	ldr	r3, [r2, r3]
 8000dee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	2207      	movs	r2, #7
 8000df4:	4013      	ands	r3, r2
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	220f      	movs	r2, #15
 8000dfa:	409a      	lsls	r2, r3
 8000dfc:	0013      	movs	r3, r2
 8000dfe:	43da      	mvns	r2, r3
 8000e00:	693b      	ldr	r3, [r7, #16]
 8000e02:	4013      	ands	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	691a      	ldr	r2, [r3, #16]
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	2107      	movs	r1, #7
 8000e0e:	400b      	ands	r3, r1
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	409a      	lsls	r2, r3
 8000e14:	0013      	movs	r3, r2
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	08da      	lsrs	r2, r3, #3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	3208      	adds	r2, #8
 8000e24:	0092      	lsls	r2, r2, #2
 8000e26:	6939      	ldr	r1, [r7, #16]
 8000e28:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	2203      	movs	r2, #3
 8000e36:	409a      	lsls	r2, r3
 8000e38:	0013      	movs	r3, r2
 8000e3a:	43da      	mvns	r2, r3
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	4013      	ands	r3, r2
 8000e40:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	2203      	movs	r2, #3
 8000e48:	401a      	ands	r2, r3
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	409a      	lsls	r2, r3
 8000e50:	0013      	movs	r3, r2
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685a      	ldr	r2, [r3, #4]
 8000e62:	23c0      	movs	r3, #192	; 0xc0
 8000e64:	029b      	lsls	r3, r3, #10
 8000e66:	4013      	ands	r3, r2
 8000e68:	d100      	bne.n	8000e6c <HAL_GPIO_Init+0x174>
 8000e6a:	e0a0      	b.n	8000fae <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e6c:	4b57      	ldr	r3, [pc, #348]	; (8000fcc <HAL_GPIO_Init+0x2d4>)
 8000e6e:	699a      	ldr	r2, [r3, #24]
 8000e70:	4b56      	ldr	r3, [pc, #344]	; (8000fcc <HAL_GPIO_Init+0x2d4>)
 8000e72:	2101      	movs	r1, #1
 8000e74:	430a      	orrs	r2, r1
 8000e76:	619a      	str	r2, [r3, #24]
 8000e78:	4b54      	ldr	r3, [pc, #336]	; (8000fcc <HAL_GPIO_Init+0x2d4>)
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	4013      	ands	r3, r2
 8000e80:	60bb      	str	r3, [r7, #8]
 8000e82:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e84:	4a52      	ldr	r2, [pc, #328]	; (8000fd0 <HAL_GPIO_Init+0x2d8>)
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	089b      	lsrs	r3, r3, #2
 8000e8a:	3302      	adds	r3, #2
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	589b      	ldr	r3, [r3, r2]
 8000e90:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	2203      	movs	r2, #3
 8000e96:	4013      	ands	r3, r2
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	220f      	movs	r2, #15
 8000e9c:	409a      	lsls	r2, r3
 8000e9e:	0013      	movs	r3, r2
 8000ea0:	43da      	mvns	r2, r3
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ea8:	687a      	ldr	r2, [r7, #4]
 8000eaa:	2390      	movs	r3, #144	; 0x90
 8000eac:	05db      	lsls	r3, r3, #23
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	d019      	beq.n	8000ee6 <HAL_GPIO_Init+0x1ee>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4a47      	ldr	r2, [pc, #284]	; (8000fd4 <HAL_GPIO_Init+0x2dc>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d013      	beq.n	8000ee2 <HAL_GPIO_Init+0x1ea>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4a46      	ldr	r2, [pc, #280]	; (8000fd8 <HAL_GPIO_Init+0x2e0>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d00d      	beq.n	8000ede <HAL_GPIO_Init+0x1e6>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a45      	ldr	r2, [pc, #276]	; (8000fdc <HAL_GPIO_Init+0x2e4>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d007      	beq.n	8000eda <HAL_GPIO_Init+0x1e2>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4a44      	ldr	r2, [pc, #272]	; (8000fe0 <HAL_GPIO_Init+0x2e8>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d101      	bne.n	8000ed6 <HAL_GPIO_Init+0x1de>
 8000ed2:	2304      	movs	r3, #4
 8000ed4:	e008      	b.n	8000ee8 <HAL_GPIO_Init+0x1f0>
 8000ed6:	2305      	movs	r3, #5
 8000ed8:	e006      	b.n	8000ee8 <HAL_GPIO_Init+0x1f0>
 8000eda:	2303      	movs	r3, #3
 8000edc:	e004      	b.n	8000ee8 <HAL_GPIO_Init+0x1f0>
 8000ede:	2302      	movs	r3, #2
 8000ee0:	e002      	b.n	8000ee8 <HAL_GPIO_Init+0x1f0>
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e000      	b.n	8000ee8 <HAL_GPIO_Init+0x1f0>
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	697a      	ldr	r2, [r7, #20]
 8000eea:	2103      	movs	r1, #3
 8000eec:	400a      	ands	r2, r1
 8000eee:	0092      	lsls	r2, r2, #2
 8000ef0:	4093      	lsls	r3, r2
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ef8:	4935      	ldr	r1, [pc, #212]	; (8000fd0 <HAL_GPIO_Init+0x2d8>)
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	089b      	lsrs	r3, r3, #2
 8000efe:	3302      	adds	r3, #2
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f06:	4b37      	ldr	r3, [pc, #220]	; (8000fe4 <HAL_GPIO_Init+0x2ec>)
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	43da      	mvns	r2, r3
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	4013      	ands	r3, r2
 8000f14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685a      	ldr	r2, [r3, #4]
 8000f1a:	2380      	movs	r3, #128	; 0x80
 8000f1c:	035b      	lsls	r3, r3, #13
 8000f1e:	4013      	ands	r3, r2
 8000f20:	d003      	beq.n	8000f2a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f2a:	4b2e      	ldr	r3, [pc, #184]	; (8000fe4 <HAL_GPIO_Init+0x2ec>)
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000f30:	4b2c      	ldr	r3, [pc, #176]	; (8000fe4 <HAL_GPIO_Init+0x2ec>)
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	43da      	mvns	r2, r3
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685a      	ldr	r2, [r3, #4]
 8000f44:	2380      	movs	r3, #128	; 0x80
 8000f46:	039b      	lsls	r3, r3, #14
 8000f48:	4013      	ands	r3, r2
 8000f4a:	d003      	beq.n	8000f54 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f54:	4b23      	ldr	r3, [pc, #140]	; (8000fe4 <HAL_GPIO_Init+0x2ec>)
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000f5a:	4b22      	ldr	r3, [pc, #136]	; (8000fe4 <HAL_GPIO_Init+0x2ec>)
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	43da      	mvns	r2, r3
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	4013      	ands	r3, r2
 8000f68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685a      	ldr	r2, [r3, #4]
 8000f6e:	2380      	movs	r3, #128	; 0x80
 8000f70:	029b      	lsls	r3, r3, #10
 8000f72:	4013      	ands	r3, r2
 8000f74:	d003      	beq.n	8000f7e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f7e:	4b19      	ldr	r3, [pc, #100]	; (8000fe4 <HAL_GPIO_Init+0x2ec>)
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000f84:	4b17      	ldr	r3, [pc, #92]	; (8000fe4 <HAL_GPIO_Init+0x2ec>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	43da      	mvns	r2, r3
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	4013      	ands	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685a      	ldr	r2, [r3, #4]
 8000f98:	2380      	movs	r3, #128	; 0x80
 8000f9a:	025b      	lsls	r3, r3, #9
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	d003      	beq.n	8000fa8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000fa8:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <HAL_GPIO_Init+0x2ec>)
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	40da      	lsrs	r2, r3
 8000fbc:	1e13      	subs	r3, r2, #0
 8000fbe:	d000      	beq.n	8000fc2 <HAL_GPIO_Init+0x2ca>
 8000fc0:	e6a2      	b.n	8000d08 <HAL_GPIO_Init+0x10>
  } 
}
 8000fc2:	46c0      	nop			; (mov r8, r8)
 8000fc4:	46c0      	nop			; (mov r8, r8)
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	b006      	add	sp, #24
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40021000 	.word	0x40021000
 8000fd0:	40010000 	.word	0x40010000
 8000fd4:	48000400 	.word	0x48000400
 8000fd8:	48000800 	.word	0x48000800
 8000fdc:	48000c00 	.word	0x48000c00
 8000fe0:	48001000 	.word	0x48001000
 8000fe4:	40010400 	.word	0x40010400

08000fe8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	0008      	movs	r0, r1
 8000ff2:	0011      	movs	r1, r2
 8000ff4:	1cbb      	adds	r3, r7, #2
 8000ff6:	1c02      	adds	r2, r0, #0
 8000ff8:	801a      	strh	r2, [r3, #0]
 8000ffa:	1c7b      	adds	r3, r7, #1
 8000ffc:	1c0a      	adds	r2, r1, #0
 8000ffe:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001000:	1c7b      	adds	r3, r7, #1
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d004      	beq.n	8001012 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001008:	1cbb      	adds	r3, r7, #2
 800100a:	881a      	ldrh	r2, [r3, #0]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001010:	e003      	b.n	800101a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001012:	1cbb      	adds	r3, r7, #2
 8001014:	881a      	ldrh	r2, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	629a      	str	r2, [r3, #40]	; 0x28
}
 800101a:	46c0      	nop			; (mov r8, r8)
 800101c:	46bd      	mov	sp, r7
 800101e:	b002      	add	sp, #8
 8001020:	bd80      	pop	{r7, pc}

08001022 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b084      	sub	sp, #16
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
 800102a:	000a      	movs	r2, r1
 800102c:	1cbb      	adds	r3, r7, #2
 800102e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	695b      	ldr	r3, [r3, #20]
 8001034:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001036:	1cbb      	adds	r3, r7, #2
 8001038:	881b      	ldrh	r3, [r3, #0]
 800103a:	68fa      	ldr	r2, [r7, #12]
 800103c:	4013      	ands	r3, r2
 800103e:	041a      	lsls	r2, r3, #16
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	43db      	mvns	r3, r3
 8001044:	1cb9      	adds	r1, r7, #2
 8001046:	8809      	ldrh	r1, [r1, #0]
 8001048:	400b      	ands	r3, r1
 800104a:	431a      	orrs	r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	619a      	str	r2, [r3, #24]
}
 8001050:	46c0      	nop			; (mov r8, r8)
 8001052:	46bd      	mov	sp, r7
 8001054:	b004      	add	sp, #16
 8001056:	bd80      	pop	{r7, pc}

08001058 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d101      	bne.n	800106a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e082      	b.n	8001170 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2241      	movs	r2, #65	; 0x41
 800106e:	5c9b      	ldrb	r3, [r3, r2]
 8001070:	b2db      	uxtb	r3, r3
 8001072:	2b00      	cmp	r3, #0
 8001074:	d107      	bne.n	8001086 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2240      	movs	r2, #64	; 0x40
 800107a:	2100      	movs	r1, #0
 800107c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	0018      	movs	r0, r3
 8001082:	f7ff fb23 	bl	80006cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2241      	movs	r2, #65	; 0x41
 800108a:	2124      	movs	r1, #36	; 0x24
 800108c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2101      	movs	r1, #1
 800109a:	438a      	bics	r2, r1
 800109c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	685a      	ldr	r2, [r3, #4]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4934      	ldr	r1, [pc, #208]	; (8001178 <HAL_I2C_Init+0x120>)
 80010a8:	400a      	ands	r2, r1
 80010aa:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	689a      	ldr	r2, [r3, #8]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4931      	ldr	r1, [pc, #196]	; (800117c <HAL_I2C_Init+0x124>)
 80010b8:	400a      	ands	r2, r1
 80010ba:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d108      	bne.n	80010d6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	689a      	ldr	r2, [r3, #8]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2180      	movs	r1, #128	; 0x80
 80010ce:	0209      	lsls	r1, r1, #8
 80010d0:	430a      	orrs	r2, r1
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	e007      	b.n	80010e6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	689a      	ldr	r2, [r3, #8]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	2184      	movs	r1, #132	; 0x84
 80010e0:	0209      	lsls	r1, r1, #8
 80010e2:	430a      	orrs	r2, r1
 80010e4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	68db      	ldr	r3, [r3, #12]
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d104      	bne.n	80010f8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2280      	movs	r2, #128	; 0x80
 80010f4:	0112      	lsls	r2, r2, #4
 80010f6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	685a      	ldr	r2, [r3, #4]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	491f      	ldr	r1, [pc, #124]	; (8001180 <HAL_I2C_Init+0x128>)
 8001104:	430a      	orrs	r2, r1
 8001106:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	68da      	ldr	r2, [r3, #12]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	491a      	ldr	r1, [pc, #104]	; (800117c <HAL_I2C_Init+0x124>)
 8001114:	400a      	ands	r2, r1
 8001116:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	691a      	ldr	r2, [r3, #16]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	695b      	ldr	r3, [r3, #20]
 8001120:	431a      	orrs	r2, r3
 8001122:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	699b      	ldr	r3, [r3, #24]
 8001128:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	430a      	orrs	r2, r1
 8001130:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	69d9      	ldr	r1, [r3, #28]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6a1a      	ldr	r2, [r3, #32]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	430a      	orrs	r2, r1
 8001140:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2101      	movs	r1, #1
 800114e:	430a      	orrs	r2, r1
 8001150:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2200      	movs	r2, #0
 8001156:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2241      	movs	r2, #65	; 0x41
 800115c:	2120      	movs	r1, #32
 800115e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2200      	movs	r2, #0
 8001164:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2242      	movs	r2, #66	; 0x42
 800116a:	2100      	movs	r1, #0
 800116c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800116e:	2300      	movs	r3, #0
}
 8001170:	0018      	movs	r0, r3
 8001172:	46bd      	mov	sp, r7
 8001174:	b002      	add	sp, #8
 8001176:	bd80      	pop	{r7, pc}
 8001178:	f0ffffff 	.word	0xf0ffffff
 800117c:	ffff7fff 	.word	0xffff7fff
 8001180:	02008000 	.word	0x02008000

08001184 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2241      	movs	r2, #65	; 0x41
 8001192:	5c9b      	ldrb	r3, [r3, r2]
 8001194:	b2db      	uxtb	r3, r3
 8001196:	2b20      	cmp	r3, #32
 8001198:	d138      	bne.n	800120c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2240      	movs	r2, #64	; 0x40
 800119e:	5c9b      	ldrb	r3, [r3, r2]
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d101      	bne.n	80011a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80011a4:	2302      	movs	r3, #2
 80011a6:	e032      	b.n	800120e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2240      	movs	r2, #64	; 0x40
 80011ac:	2101      	movs	r1, #1
 80011ae:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2241      	movs	r2, #65	; 0x41
 80011b4:	2124      	movs	r1, #36	; 0x24
 80011b6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	2101      	movs	r1, #1
 80011c4:	438a      	bics	r2, r1
 80011c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4911      	ldr	r1, [pc, #68]	; (8001218 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80011d4:	400a      	ands	r2, r1
 80011d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	6819      	ldr	r1, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	683a      	ldr	r2, [r7, #0]
 80011e4:	430a      	orrs	r2, r1
 80011e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	2101      	movs	r1, #1
 80011f4:	430a      	orrs	r2, r1
 80011f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2241      	movs	r2, #65	; 0x41
 80011fc:	2120      	movs	r1, #32
 80011fe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2240      	movs	r2, #64	; 0x40
 8001204:	2100      	movs	r1, #0
 8001206:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001208:	2300      	movs	r3, #0
 800120a:	e000      	b.n	800120e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800120c:	2302      	movs	r3, #2
  }
}
 800120e:	0018      	movs	r0, r3
 8001210:	46bd      	mov	sp, r7
 8001212:	b002      	add	sp, #8
 8001214:	bd80      	pop	{r7, pc}
 8001216:	46c0      	nop			; (mov r8, r8)
 8001218:	ffffefff 	.word	0xffffefff

0800121c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2241      	movs	r2, #65	; 0x41
 800122a:	5c9b      	ldrb	r3, [r3, r2]
 800122c:	b2db      	uxtb	r3, r3
 800122e:	2b20      	cmp	r3, #32
 8001230:	d139      	bne.n	80012a6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2240      	movs	r2, #64	; 0x40
 8001236:	5c9b      	ldrb	r3, [r3, r2]
 8001238:	2b01      	cmp	r3, #1
 800123a:	d101      	bne.n	8001240 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800123c:	2302      	movs	r3, #2
 800123e:	e033      	b.n	80012a8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2240      	movs	r2, #64	; 0x40
 8001244:	2101      	movs	r1, #1
 8001246:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2241      	movs	r2, #65	; 0x41
 800124c:	2124      	movs	r1, #36	; 0x24
 800124e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2101      	movs	r1, #1
 800125c:	438a      	bics	r2, r1
 800125e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	4a11      	ldr	r2, [pc, #68]	; (80012b0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800126c:	4013      	ands	r3, r2
 800126e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	021b      	lsls	r3, r3, #8
 8001274:	68fa      	ldr	r2, [r7, #12]
 8001276:	4313      	orrs	r3, r2
 8001278:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	68fa      	ldr	r2, [r7, #12]
 8001280:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2101      	movs	r1, #1
 800128e:	430a      	orrs	r2, r1
 8001290:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2241      	movs	r2, #65	; 0x41
 8001296:	2120      	movs	r1, #32
 8001298:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2240      	movs	r2, #64	; 0x40
 800129e:	2100      	movs	r1, #0
 80012a0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80012a2:	2300      	movs	r3, #0
 80012a4:	e000      	b.n	80012a8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80012a6:	2302      	movs	r3, #2
  }
}
 80012a8:	0018      	movs	r0, r3
 80012aa:	46bd      	mov	sp, r7
 80012ac:	b004      	add	sp, #16
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	fffff0ff 	.word	0xfffff0ff

080012b4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80012b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012b6:	b08b      	sub	sp, #44	; 0x2c
 80012b8:	af06      	add	r7, sp, #24
 80012ba:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d101      	bne.n	80012c6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e0f0      	b.n	80014a8 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a79      	ldr	r2, [pc, #484]	; (80014b0 <HAL_PCD_Init+0x1fc>)
 80012ca:	5c9b      	ldrb	r3, [r3, r2]
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d108      	bne.n	80012e4 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80012d2:	687a      	ldr	r2, [r7, #4]
 80012d4:	23aa      	movs	r3, #170	; 0xaa
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	2100      	movs	r1, #0
 80012da:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	0018      	movs	r0, r3
 80012e0:	f7ff fb54 	bl	800098c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	4a72      	ldr	r2, [pc, #456]	; (80014b0 <HAL_PCD_Init+0x1fc>)
 80012e8:	2103      	movs	r1, #3
 80012ea:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	0018      	movs	r0, r3
 80012f2:	f001 fafd 	bl	80028f0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012f6:	230f      	movs	r3, #15
 80012f8:	18fb      	adds	r3, r7, r3
 80012fa:	2200      	movs	r2, #0
 80012fc:	701a      	strb	r2, [r3, #0]
 80012fe:	e049      	b.n	8001394 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001300:	200f      	movs	r0, #15
 8001302:	183b      	adds	r3, r7, r0
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	6879      	ldr	r1, [r7, #4]
 8001308:	1c5a      	adds	r2, r3, #1
 800130a:	0013      	movs	r3, r2
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	189b      	adds	r3, r3, r2
 8001310:	00db      	lsls	r3, r3, #3
 8001312:	18cb      	adds	r3, r1, r3
 8001314:	3301      	adds	r3, #1
 8001316:	2201      	movs	r2, #1
 8001318:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800131a:	183b      	adds	r3, r7, r0
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	6879      	ldr	r1, [r7, #4]
 8001320:	1c5a      	adds	r2, r3, #1
 8001322:	0013      	movs	r3, r2
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	189b      	adds	r3, r3, r2
 8001328:	00db      	lsls	r3, r3, #3
 800132a:	183a      	adds	r2, r7, r0
 800132c:	7812      	ldrb	r2, [r2, #0]
 800132e:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001330:	183b      	adds	r3, r7, r0
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	6879      	ldr	r1, [r7, #4]
 8001336:	1c5a      	adds	r2, r3, #1
 8001338:	0013      	movs	r3, r2
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	189b      	adds	r3, r3, r2
 800133e:	00db      	lsls	r3, r3, #3
 8001340:	18cb      	adds	r3, r1, r3
 8001342:	3303      	adds	r3, #3
 8001344:	2200      	movs	r2, #0
 8001346:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001348:	183b      	adds	r3, r7, r0
 800134a:	781a      	ldrb	r2, [r3, #0]
 800134c:	6879      	ldr	r1, [r7, #4]
 800134e:	0013      	movs	r3, r2
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	189b      	adds	r3, r3, r2
 8001354:	00db      	lsls	r3, r3, #3
 8001356:	18cb      	adds	r3, r1, r3
 8001358:	3338      	adds	r3, #56	; 0x38
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800135e:	183b      	adds	r3, r7, r0
 8001360:	781a      	ldrb	r2, [r3, #0]
 8001362:	6879      	ldr	r1, [r7, #4]
 8001364:	0013      	movs	r3, r2
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	189b      	adds	r3, r3, r2
 800136a:	00db      	lsls	r3, r3, #3
 800136c:	18cb      	adds	r3, r1, r3
 800136e:	333c      	adds	r3, #60	; 0x3c
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001374:	183b      	adds	r3, r7, r0
 8001376:	781a      	ldrb	r2, [r3, #0]
 8001378:	6879      	ldr	r1, [r7, #4]
 800137a:	0013      	movs	r3, r2
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	189b      	adds	r3, r3, r2
 8001380:	00db      	lsls	r3, r3, #3
 8001382:	18cb      	adds	r3, r1, r3
 8001384:	3340      	adds	r3, #64	; 0x40
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800138a:	183b      	adds	r3, r7, r0
 800138c:	781a      	ldrb	r2, [r3, #0]
 800138e:	183b      	adds	r3, r7, r0
 8001390:	3201      	adds	r2, #1
 8001392:	701a      	strb	r2, [r3, #0]
 8001394:	210f      	movs	r1, #15
 8001396:	187b      	adds	r3, r7, r1
 8001398:	781a      	ldrb	r2, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	429a      	cmp	r2, r3
 80013a0:	d3ae      	bcc.n	8001300 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013a2:	187b      	adds	r3, r7, r1
 80013a4:	2200      	movs	r2, #0
 80013a6:	701a      	strb	r2, [r3, #0]
 80013a8:	e056      	b.n	8001458 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80013aa:	240f      	movs	r4, #15
 80013ac:	193b      	adds	r3, r7, r4
 80013ae:	781a      	ldrb	r2, [r3, #0]
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	236a      	movs	r3, #106	; 0x6a
 80013b4:	33ff      	adds	r3, #255	; 0xff
 80013b6:	0019      	movs	r1, r3
 80013b8:	0013      	movs	r3, r2
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	189b      	adds	r3, r3, r2
 80013be:	00db      	lsls	r3, r3, #3
 80013c0:	18c3      	adds	r3, r0, r3
 80013c2:	185b      	adds	r3, r3, r1
 80013c4:	2200      	movs	r2, #0
 80013c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80013c8:	193b      	adds	r3, r7, r4
 80013ca:	781a      	ldrb	r2, [r3, #0]
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	23b4      	movs	r3, #180	; 0xb4
 80013d0:	0059      	lsls	r1, r3, #1
 80013d2:	0013      	movs	r3, r2
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	189b      	adds	r3, r3, r2
 80013d8:	00db      	lsls	r3, r3, #3
 80013da:	18c3      	adds	r3, r0, r3
 80013dc:	185b      	adds	r3, r3, r1
 80013de:	193a      	adds	r2, r7, r4
 80013e0:	7812      	ldrb	r2, [r2, #0]
 80013e2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80013e4:	193b      	adds	r3, r7, r4
 80013e6:	781a      	ldrb	r2, [r3, #0]
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	236c      	movs	r3, #108	; 0x6c
 80013ec:	33ff      	adds	r3, #255	; 0xff
 80013ee:	0019      	movs	r1, r3
 80013f0:	0013      	movs	r3, r2
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	189b      	adds	r3, r3, r2
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	18c3      	adds	r3, r0, r3
 80013fa:	185b      	adds	r3, r3, r1
 80013fc:	2200      	movs	r2, #0
 80013fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001400:	193b      	adds	r3, r7, r4
 8001402:	781a      	ldrb	r2, [r3, #0]
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	23bc      	movs	r3, #188	; 0xbc
 8001408:	0059      	lsls	r1, r3, #1
 800140a:	0013      	movs	r3, r2
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	189b      	adds	r3, r3, r2
 8001410:	00db      	lsls	r3, r3, #3
 8001412:	18c3      	adds	r3, r0, r3
 8001414:	185b      	adds	r3, r3, r1
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800141a:	193b      	adds	r3, r7, r4
 800141c:	781a      	ldrb	r2, [r3, #0]
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	23be      	movs	r3, #190	; 0xbe
 8001422:	0059      	lsls	r1, r3, #1
 8001424:	0013      	movs	r3, r2
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	189b      	adds	r3, r3, r2
 800142a:	00db      	lsls	r3, r3, #3
 800142c:	18c3      	adds	r3, r0, r3
 800142e:	185b      	adds	r3, r3, r1
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001434:	193b      	adds	r3, r7, r4
 8001436:	781a      	ldrb	r2, [r3, #0]
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	23c0      	movs	r3, #192	; 0xc0
 800143c:	0059      	lsls	r1, r3, #1
 800143e:	0013      	movs	r3, r2
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	189b      	adds	r3, r3, r2
 8001444:	00db      	lsls	r3, r3, #3
 8001446:	18c3      	adds	r3, r0, r3
 8001448:	185b      	adds	r3, r3, r1
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800144e:	193b      	adds	r3, r7, r4
 8001450:	781a      	ldrb	r2, [r3, #0]
 8001452:	193b      	adds	r3, r7, r4
 8001454:	3201      	adds	r2, #1
 8001456:	701a      	strb	r2, [r3, #0]
 8001458:	230f      	movs	r3, #15
 800145a:	18fb      	adds	r3, r7, r3
 800145c:	781a      	ldrb	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	429a      	cmp	r2, r3
 8001464:	d3a1      	bcc.n	80013aa <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6818      	ldr	r0, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	466a      	mov	r2, sp
 800146e:	0011      	movs	r1, r2
 8001470:	001a      	movs	r2, r3
 8001472:	3210      	adds	r2, #16
 8001474:	ca70      	ldmia	r2!, {r4, r5, r6}
 8001476:	c170      	stmia	r1!, {r4, r5, r6}
 8001478:	ca30      	ldmia	r2!, {r4, r5}
 800147a:	c130      	stmia	r1!, {r4, r5}
 800147c:	6859      	ldr	r1, [r3, #4]
 800147e:	689a      	ldr	r2, [r3, #8]
 8001480:	68db      	ldr	r3, [r3, #12]
 8001482:	f001 fa4f 	bl	8002924 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2224      	movs	r2, #36	; 0x24
 800148a:	2100      	movs	r1, #0
 800148c:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a07      	ldr	r2, [pc, #28]	; (80014b0 <HAL_PCD_Init+0x1fc>)
 8001492:	2101      	movs	r1, #1
 8001494:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	69db      	ldr	r3, [r3, #28]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d103      	bne.n	80014a6 <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	0018      	movs	r0, r3
 80014a2:	f000 f807 	bl	80014b4 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80014a6:	2300      	movs	r3, #0
}
 80014a8:	0018      	movs	r0, r3
 80014aa:	46bd      	mov	sp, r7
 80014ac:	b005      	add	sp, #20
 80014ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014b0:	000002a9 	.word	0x000002a9

080014b4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	23ba      	movs	r3, #186	; 0xba
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	2101      	movs	r1, #1
 80014ca:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	23b8      	movs	r3, #184	; 0xb8
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	2100      	movs	r1, #0
 80014d4:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	2254      	movs	r2, #84	; 0x54
 80014da:	5a9b      	ldrh	r3, [r3, r2]
 80014dc:	b29b      	uxth	r3, r3
 80014de:	2201      	movs	r2, #1
 80014e0:	4313      	orrs	r3, r2
 80014e2:	b299      	uxth	r1, r3
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	2254      	movs	r2, #84	; 0x54
 80014e8:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	2254      	movs	r2, #84	; 0x54
 80014ee:	5a9b      	ldrh	r3, [r3, r2]
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	2202      	movs	r2, #2
 80014f4:	4313      	orrs	r3, r2
 80014f6:	b299      	uxth	r1, r3
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	2254      	movs	r2, #84	; 0x54
 80014fc:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80014fe:	2300      	movs	r3, #0
}
 8001500:	0018      	movs	r0, r3
 8001502:	46bd      	mov	sp, r7
 8001504:	b004      	add	sp, #16
 8001506:	bd80      	pop	{r7, pc}

08001508 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b088      	sub	sp, #32
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d102      	bne.n	800151c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	f000 fb76 	bl	8001c08 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2201      	movs	r2, #1
 8001522:	4013      	ands	r3, r2
 8001524:	d100      	bne.n	8001528 <HAL_RCC_OscConfig+0x20>
 8001526:	e08e      	b.n	8001646 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001528:	4bc5      	ldr	r3, [pc, #788]	; (8001840 <HAL_RCC_OscConfig+0x338>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	220c      	movs	r2, #12
 800152e:	4013      	ands	r3, r2
 8001530:	2b04      	cmp	r3, #4
 8001532:	d00e      	beq.n	8001552 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001534:	4bc2      	ldr	r3, [pc, #776]	; (8001840 <HAL_RCC_OscConfig+0x338>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	220c      	movs	r2, #12
 800153a:	4013      	ands	r3, r2
 800153c:	2b08      	cmp	r3, #8
 800153e:	d117      	bne.n	8001570 <HAL_RCC_OscConfig+0x68>
 8001540:	4bbf      	ldr	r3, [pc, #764]	; (8001840 <HAL_RCC_OscConfig+0x338>)
 8001542:	685a      	ldr	r2, [r3, #4]
 8001544:	23c0      	movs	r3, #192	; 0xc0
 8001546:	025b      	lsls	r3, r3, #9
 8001548:	401a      	ands	r2, r3
 800154a:	2380      	movs	r3, #128	; 0x80
 800154c:	025b      	lsls	r3, r3, #9
 800154e:	429a      	cmp	r2, r3
 8001550:	d10e      	bne.n	8001570 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001552:	4bbb      	ldr	r3, [pc, #748]	; (8001840 <HAL_RCC_OscConfig+0x338>)
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	2380      	movs	r3, #128	; 0x80
 8001558:	029b      	lsls	r3, r3, #10
 800155a:	4013      	ands	r3, r2
 800155c:	d100      	bne.n	8001560 <HAL_RCC_OscConfig+0x58>
 800155e:	e071      	b.n	8001644 <HAL_RCC_OscConfig+0x13c>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d000      	beq.n	800156a <HAL_RCC_OscConfig+0x62>
 8001568:	e06c      	b.n	8001644 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	f000 fb4c 	bl	8001c08 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d107      	bne.n	8001588 <HAL_RCC_OscConfig+0x80>
 8001578:	4bb1      	ldr	r3, [pc, #708]	; (8001840 <HAL_RCC_OscConfig+0x338>)
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	4bb0      	ldr	r3, [pc, #704]	; (8001840 <HAL_RCC_OscConfig+0x338>)
 800157e:	2180      	movs	r1, #128	; 0x80
 8001580:	0249      	lsls	r1, r1, #9
 8001582:	430a      	orrs	r2, r1
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	e02f      	b.n	80015e8 <HAL_RCC_OscConfig+0xe0>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d10c      	bne.n	80015aa <HAL_RCC_OscConfig+0xa2>
 8001590:	4bab      	ldr	r3, [pc, #684]	; (8001840 <HAL_RCC_OscConfig+0x338>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	4baa      	ldr	r3, [pc, #680]	; (8001840 <HAL_RCC_OscConfig+0x338>)
 8001596:	49ab      	ldr	r1, [pc, #684]	; (8001844 <HAL_RCC_OscConfig+0x33c>)
 8001598:	400a      	ands	r2, r1
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	4ba8      	ldr	r3, [pc, #672]	; (8001840 <HAL_RCC_OscConfig+0x338>)
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	4ba7      	ldr	r3, [pc, #668]	; (8001840 <HAL_RCC_OscConfig+0x338>)
 80015a2:	49a9      	ldr	r1, [pc, #676]	; (8001848 <HAL_RCC_OscConfig+0x340>)
 80015a4:	400a      	ands	r2, r1
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	e01e      	b.n	80015e8 <HAL_RCC_OscConfig+0xe0>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	2b05      	cmp	r3, #5
 80015b0:	d10e      	bne.n	80015d0 <HAL_RCC_OscConfig+0xc8>
 80015b2:	4ba3      	ldr	r3, [pc, #652]	; (8001840 <HAL_RCC_OscConfig+0x338>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	4ba2      	ldr	r3, [pc, #648]	; (8001840 <HAL_RCC_OscConfig+0x338>)
 80015b8:	2180      	movs	r1, #128	; 0x80
 80015ba:	02c9      	lsls	r1, r1, #11
 80015bc:	430a      	orrs	r2, r1
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	4b9f      	ldr	r3, [pc, #636]	; (8001840 <HAL_RCC_OscConfig+0x338>)
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	4b9e      	ldr	r3, [pc, #632]	; (8001840 <HAL_RCC_OscConfig+0x338>)
 80015c6:	2180      	movs	r1, #128	; 0x80
 80015c8:	0249      	lsls	r1, r1, #9
 80015ca:	430a      	orrs	r2, r1
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	e00b      	b.n	80015e8 <HAL_RCC_OscConfig+0xe0>
 80015d0:	4b9b      	ldr	r3, [pc, #620]	; (8001840 <HAL_RCC_OscConfig+0x338>)
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	4b9a      	ldr	r3, [pc, #616]	; (8001840 <HAL_RCC_OscConfig+0x338>)
 80015d6:	499b      	ldr	r1, [pc, #620]	; (8001844 <HAL_RCC_OscConfig+0x33c>)
 80015d8:	400a      	ands	r2, r1
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	4b98      	ldr	r3, [pc, #608]	; (8001840 <HAL_RCC_OscConfig+0x338>)
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	4b97      	ldr	r3, [pc, #604]	; (8001840 <HAL_RCC_OscConfig+0x338>)
 80015e2:	4999      	ldr	r1, [pc, #612]	; (8001848 <HAL_RCC_OscConfig+0x340>)
 80015e4:	400a      	ands	r2, r1
 80015e6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d014      	beq.n	800161a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f0:	f7ff fa9a 	bl	8000b28 <HAL_GetTick>
 80015f4:	0003      	movs	r3, r0
 80015f6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015f8:	e008      	b.n	800160c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015fa:	f7ff fa95 	bl	8000b28 <HAL_GetTick>
 80015fe:	0002      	movs	r2, r0
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	2b64      	cmp	r3, #100	; 0x64
 8001606:	d901      	bls.n	800160c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e2fd      	b.n	8001c08 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800160c:	4b8c      	ldr	r3, [pc, #560]	; (8001840 <HAL_RCC_OscConfig+0x338>)
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	2380      	movs	r3, #128	; 0x80
 8001612:	029b      	lsls	r3, r3, #10
 8001614:	4013      	ands	r3, r2
 8001616:	d0f0      	beq.n	80015fa <HAL_RCC_OscConfig+0xf2>
 8001618:	e015      	b.n	8001646 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800161a:	f7ff fa85 	bl	8000b28 <HAL_GetTick>
 800161e:	0003      	movs	r3, r0
 8001620:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001622:	e008      	b.n	8001636 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001624:	f7ff fa80 	bl	8000b28 <HAL_GetTick>
 8001628:	0002      	movs	r2, r0
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b64      	cmp	r3, #100	; 0x64
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e2e8      	b.n	8001c08 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001636:	4b82      	ldr	r3, [pc, #520]	; (8001840 <HAL_RCC_OscConfig+0x338>)
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	2380      	movs	r3, #128	; 0x80
 800163c:	029b      	lsls	r3, r3, #10
 800163e:	4013      	ands	r3, r2
 8001640:	d1f0      	bne.n	8001624 <HAL_RCC_OscConfig+0x11c>
 8001642:	e000      	b.n	8001646 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001644:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2202      	movs	r2, #2
 800164c:	4013      	ands	r3, r2
 800164e:	d100      	bne.n	8001652 <HAL_RCC_OscConfig+0x14a>
 8001650:	e06c      	b.n	800172c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001652:	4b7b      	ldr	r3, [pc, #492]	; (8001840 <HAL_RCC_OscConfig+0x338>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	220c      	movs	r2, #12
 8001658:	4013      	ands	r3, r2
 800165a:	d00e      	beq.n	800167a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800165c:	4b78      	ldr	r3, [pc, #480]	; (8001840 <HAL_RCC_OscConfig+0x338>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	220c      	movs	r2, #12
 8001662:	4013      	ands	r3, r2
 8001664:	2b08      	cmp	r3, #8
 8001666:	d11f      	bne.n	80016a8 <HAL_RCC_OscConfig+0x1a0>
 8001668:	4b75      	ldr	r3, [pc, #468]	; (8001840 <HAL_RCC_OscConfig+0x338>)
 800166a:	685a      	ldr	r2, [r3, #4]
 800166c:	23c0      	movs	r3, #192	; 0xc0
 800166e:	025b      	lsls	r3, r3, #9
 8001670:	401a      	ands	r2, r3
 8001672:	2380      	movs	r3, #128	; 0x80
 8001674:	021b      	lsls	r3, r3, #8
 8001676:	429a      	cmp	r2, r3
 8001678:	d116      	bne.n	80016a8 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800167a:	4b71      	ldr	r3, [pc, #452]	; (8001840 <HAL_RCC_OscConfig+0x338>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2202      	movs	r2, #2
 8001680:	4013      	ands	r3, r2
 8001682:	d005      	beq.n	8001690 <HAL_RCC_OscConfig+0x188>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d001      	beq.n	8001690 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e2bb      	b.n	8001c08 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001690:	4b6b      	ldr	r3, [pc, #428]	; (8001840 <HAL_RCC_OscConfig+0x338>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	22f8      	movs	r2, #248	; 0xf8
 8001696:	4393      	bics	r3, r2
 8001698:	0019      	movs	r1, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	691b      	ldr	r3, [r3, #16]
 800169e:	00da      	lsls	r2, r3, #3
 80016a0:	4b67      	ldr	r3, [pc, #412]	; (8001840 <HAL_RCC_OscConfig+0x338>)
 80016a2:	430a      	orrs	r2, r1
 80016a4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016a6:	e041      	b.n	800172c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d024      	beq.n	80016fa <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016b0:	4b63      	ldr	r3, [pc, #396]	; (8001840 <HAL_RCC_OscConfig+0x338>)
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	4b62      	ldr	r3, [pc, #392]	; (8001840 <HAL_RCC_OscConfig+0x338>)
 80016b6:	2101      	movs	r1, #1
 80016b8:	430a      	orrs	r2, r1
 80016ba:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016bc:	f7ff fa34 	bl	8000b28 <HAL_GetTick>
 80016c0:	0003      	movs	r3, r0
 80016c2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016c4:	e008      	b.n	80016d8 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016c6:	f7ff fa2f 	bl	8000b28 <HAL_GetTick>
 80016ca:	0002      	movs	r2, r0
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d901      	bls.n	80016d8 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e297      	b.n	8001c08 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016d8:	4b59      	ldr	r3, [pc, #356]	; (8001840 <HAL_RCC_OscConfig+0x338>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2202      	movs	r2, #2
 80016de:	4013      	ands	r3, r2
 80016e0:	d0f1      	beq.n	80016c6 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016e2:	4b57      	ldr	r3, [pc, #348]	; (8001840 <HAL_RCC_OscConfig+0x338>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	22f8      	movs	r2, #248	; 0xf8
 80016e8:	4393      	bics	r3, r2
 80016ea:	0019      	movs	r1, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	691b      	ldr	r3, [r3, #16]
 80016f0:	00da      	lsls	r2, r3, #3
 80016f2:	4b53      	ldr	r3, [pc, #332]	; (8001840 <HAL_RCC_OscConfig+0x338>)
 80016f4:	430a      	orrs	r2, r1
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	e018      	b.n	800172c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016fa:	4b51      	ldr	r3, [pc, #324]	; (8001840 <HAL_RCC_OscConfig+0x338>)
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	4b50      	ldr	r3, [pc, #320]	; (8001840 <HAL_RCC_OscConfig+0x338>)
 8001700:	2101      	movs	r1, #1
 8001702:	438a      	bics	r2, r1
 8001704:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001706:	f7ff fa0f 	bl	8000b28 <HAL_GetTick>
 800170a:	0003      	movs	r3, r0
 800170c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800170e:	e008      	b.n	8001722 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001710:	f7ff fa0a 	bl	8000b28 <HAL_GetTick>
 8001714:	0002      	movs	r2, r0
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	2b02      	cmp	r3, #2
 800171c:	d901      	bls.n	8001722 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e272      	b.n	8001c08 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001722:	4b47      	ldr	r3, [pc, #284]	; (8001840 <HAL_RCC_OscConfig+0x338>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2202      	movs	r2, #2
 8001728:	4013      	ands	r3, r2
 800172a:	d1f1      	bne.n	8001710 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2208      	movs	r2, #8
 8001732:	4013      	ands	r3, r2
 8001734:	d036      	beq.n	80017a4 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	69db      	ldr	r3, [r3, #28]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d019      	beq.n	8001772 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800173e:	4b40      	ldr	r3, [pc, #256]	; (8001840 <HAL_RCC_OscConfig+0x338>)
 8001740:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001742:	4b3f      	ldr	r3, [pc, #252]	; (8001840 <HAL_RCC_OscConfig+0x338>)
 8001744:	2101      	movs	r1, #1
 8001746:	430a      	orrs	r2, r1
 8001748:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800174a:	f7ff f9ed 	bl	8000b28 <HAL_GetTick>
 800174e:	0003      	movs	r3, r0
 8001750:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001752:	e008      	b.n	8001766 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001754:	f7ff f9e8 	bl	8000b28 <HAL_GetTick>
 8001758:	0002      	movs	r2, r0
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b02      	cmp	r3, #2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e250      	b.n	8001c08 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001766:	4b36      	ldr	r3, [pc, #216]	; (8001840 <HAL_RCC_OscConfig+0x338>)
 8001768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176a:	2202      	movs	r2, #2
 800176c:	4013      	ands	r3, r2
 800176e:	d0f1      	beq.n	8001754 <HAL_RCC_OscConfig+0x24c>
 8001770:	e018      	b.n	80017a4 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001772:	4b33      	ldr	r3, [pc, #204]	; (8001840 <HAL_RCC_OscConfig+0x338>)
 8001774:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001776:	4b32      	ldr	r3, [pc, #200]	; (8001840 <HAL_RCC_OscConfig+0x338>)
 8001778:	2101      	movs	r1, #1
 800177a:	438a      	bics	r2, r1
 800177c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800177e:	f7ff f9d3 	bl	8000b28 <HAL_GetTick>
 8001782:	0003      	movs	r3, r0
 8001784:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001786:	e008      	b.n	800179a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001788:	f7ff f9ce 	bl	8000b28 <HAL_GetTick>
 800178c:	0002      	movs	r2, r0
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	2b02      	cmp	r3, #2
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e236      	b.n	8001c08 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800179a:	4b29      	ldr	r3, [pc, #164]	; (8001840 <HAL_RCC_OscConfig+0x338>)
 800179c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179e:	2202      	movs	r2, #2
 80017a0:	4013      	ands	r3, r2
 80017a2:	d1f1      	bne.n	8001788 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2204      	movs	r2, #4
 80017aa:	4013      	ands	r3, r2
 80017ac:	d100      	bne.n	80017b0 <HAL_RCC_OscConfig+0x2a8>
 80017ae:	e0b5      	b.n	800191c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017b0:	201f      	movs	r0, #31
 80017b2:	183b      	adds	r3, r7, r0
 80017b4:	2200      	movs	r2, #0
 80017b6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017b8:	4b21      	ldr	r3, [pc, #132]	; (8001840 <HAL_RCC_OscConfig+0x338>)
 80017ba:	69da      	ldr	r2, [r3, #28]
 80017bc:	2380      	movs	r3, #128	; 0x80
 80017be:	055b      	lsls	r3, r3, #21
 80017c0:	4013      	ands	r3, r2
 80017c2:	d110      	bne.n	80017e6 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017c4:	4b1e      	ldr	r3, [pc, #120]	; (8001840 <HAL_RCC_OscConfig+0x338>)
 80017c6:	69da      	ldr	r2, [r3, #28]
 80017c8:	4b1d      	ldr	r3, [pc, #116]	; (8001840 <HAL_RCC_OscConfig+0x338>)
 80017ca:	2180      	movs	r1, #128	; 0x80
 80017cc:	0549      	lsls	r1, r1, #21
 80017ce:	430a      	orrs	r2, r1
 80017d0:	61da      	str	r2, [r3, #28]
 80017d2:	4b1b      	ldr	r3, [pc, #108]	; (8001840 <HAL_RCC_OscConfig+0x338>)
 80017d4:	69da      	ldr	r2, [r3, #28]
 80017d6:	2380      	movs	r3, #128	; 0x80
 80017d8:	055b      	lsls	r3, r3, #21
 80017da:	4013      	ands	r3, r2
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80017e0:	183b      	adds	r3, r7, r0
 80017e2:	2201      	movs	r2, #1
 80017e4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e6:	4b19      	ldr	r3, [pc, #100]	; (800184c <HAL_RCC_OscConfig+0x344>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	2380      	movs	r3, #128	; 0x80
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	4013      	ands	r3, r2
 80017f0:	d11a      	bne.n	8001828 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017f2:	4b16      	ldr	r3, [pc, #88]	; (800184c <HAL_RCC_OscConfig+0x344>)
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	4b15      	ldr	r3, [pc, #84]	; (800184c <HAL_RCC_OscConfig+0x344>)
 80017f8:	2180      	movs	r1, #128	; 0x80
 80017fa:	0049      	lsls	r1, r1, #1
 80017fc:	430a      	orrs	r2, r1
 80017fe:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001800:	f7ff f992 	bl	8000b28 <HAL_GetTick>
 8001804:	0003      	movs	r3, r0
 8001806:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001808:	e008      	b.n	800181c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800180a:	f7ff f98d 	bl	8000b28 <HAL_GetTick>
 800180e:	0002      	movs	r2, r0
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	2b64      	cmp	r3, #100	; 0x64
 8001816:	d901      	bls.n	800181c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e1f5      	b.n	8001c08 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800181c:	4b0b      	ldr	r3, [pc, #44]	; (800184c <HAL_RCC_OscConfig+0x344>)
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	2380      	movs	r3, #128	; 0x80
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	4013      	ands	r3, r2
 8001826:	d0f0      	beq.n	800180a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d10f      	bne.n	8001850 <HAL_RCC_OscConfig+0x348>
 8001830:	4b03      	ldr	r3, [pc, #12]	; (8001840 <HAL_RCC_OscConfig+0x338>)
 8001832:	6a1a      	ldr	r2, [r3, #32]
 8001834:	4b02      	ldr	r3, [pc, #8]	; (8001840 <HAL_RCC_OscConfig+0x338>)
 8001836:	2101      	movs	r1, #1
 8001838:	430a      	orrs	r2, r1
 800183a:	621a      	str	r2, [r3, #32]
 800183c:	e036      	b.n	80018ac <HAL_RCC_OscConfig+0x3a4>
 800183e:	46c0      	nop			; (mov r8, r8)
 8001840:	40021000 	.word	0x40021000
 8001844:	fffeffff 	.word	0xfffeffff
 8001848:	fffbffff 	.word	0xfffbffff
 800184c:	40007000 	.word	0x40007000
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d10c      	bne.n	8001872 <HAL_RCC_OscConfig+0x36a>
 8001858:	4bca      	ldr	r3, [pc, #808]	; (8001b84 <HAL_RCC_OscConfig+0x67c>)
 800185a:	6a1a      	ldr	r2, [r3, #32]
 800185c:	4bc9      	ldr	r3, [pc, #804]	; (8001b84 <HAL_RCC_OscConfig+0x67c>)
 800185e:	2101      	movs	r1, #1
 8001860:	438a      	bics	r2, r1
 8001862:	621a      	str	r2, [r3, #32]
 8001864:	4bc7      	ldr	r3, [pc, #796]	; (8001b84 <HAL_RCC_OscConfig+0x67c>)
 8001866:	6a1a      	ldr	r2, [r3, #32]
 8001868:	4bc6      	ldr	r3, [pc, #792]	; (8001b84 <HAL_RCC_OscConfig+0x67c>)
 800186a:	2104      	movs	r1, #4
 800186c:	438a      	bics	r2, r1
 800186e:	621a      	str	r2, [r3, #32]
 8001870:	e01c      	b.n	80018ac <HAL_RCC_OscConfig+0x3a4>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	2b05      	cmp	r3, #5
 8001878:	d10c      	bne.n	8001894 <HAL_RCC_OscConfig+0x38c>
 800187a:	4bc2      	ldr	r3, [pc, #776]	; (8001b84 <HAL_RCC_OscConfig+0x67c>)
 800187c:	6a1a      	ldr	r2, [r3, #32]
 800187e:	4bc1      	ldr	r3, [pc, #772]	; (8001b84 <HAL_RCC_OscConfig+0x67c>)
 8001880:	2104      	movs	r1, #4
 8001882:	430a      	orrs	r2, r1
 8001884:	621a      	str	r2, [r3, #32]
 8001886:	4bbf      	ldr	r3, [pc, #764]	; (8001b84 <HAL_RCC_OscConfig+0x67c>)
 8001888:	6a1a      	ldr	r2, [r3, #32]
 800188a:	4bbe      	ldr	r3, [pc, #760]	; (8001b84 <HAL_RCC_OscConfig+0x67c>)
 800188c:	2101      	movs	r1, #1
 800188e:	430a      	orrs	r2, r1
 8001890:	621a      	str	r2, [r3, #32]
 8001892:	e00b      	b.n	80018ac <HAL_RCC_OscConfig+0x3a4>
 8001894:	4bbb      	ldr	r3, [pc, #748]	; (8001b84 <HAL_RCC_OscConfig+0x67c>)
 8001896:	6a1a      	ldr	r2, [r3, #32]
 8001898:	4bba      	ldr	r3, [pc, #744]	; (8001b84 <HAL_RCC_OscConfig+0x67c>)
 800189a:	2101      	movs	r1, #1
 800189c:	438a      	bics	r2, r1
 800189e:	621a      	str	r2, [r3, #32]
 80018a0:	4bb8      	ldr	r3, [pc, #736]	; (8001b84 <HAL_RCC_OscConfig+0x67c>)
 80018a2:	6a1a      	ldr	r2, [r3, #32]
 80018a4:	4bb7      	ldr	r3, [pc, #732]	; (8001b84 <HAL_RCC_OscConfig+0x67c>)
 80018a6:	2104      	movs	r1, #4
 80018a8:	438a      	bics	r2, r1
 80018aa:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d014      	beq.n	80018de <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018b4:	f7ff f938 	bl	8000b28 <HAL_GetTick>
 80018b8:	0003      	movs	r3, r0
 80018ba:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018bc:	e009      	b.n	80018d2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018be:	f7ff f933 	bl	8000b28 <HAL_GetTick>
 80018c2:	0002      	movs	r2, r0
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	4aaf      	ldr	r2, [pc, #700]	; (8001b88 <HAL_RCC_OscConfig+0x680>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e19a      	b.n	8001c08 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018d2:	4bac      	ldr	r3, [pc, #688]	; (8001b84 <HAL_RCC_OscConfig+0x67c>)
 80018d4:	6a1b      	ldr	r3, [r3, #32]
 80018d6:	2202      	movs	r2, #2
 80018d8:	4013      	ands	r3, r2
 80018da:	d0f0      	beq.n	80018be <HAL_RCC_OscConfig+0x3b6>
 80018dc:	e013      	b.n	8001906 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018de:	f7ff f923 	bl	8000b28 <HAL_GetTick>
 80018e2:	0003      	movs	r3, r0
 80018e4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018e6:	e009      	b.n	80018fc <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018e8:	f7ff f91e 	bl	8000b28 <HAL_GetTick>
 80018ec:	0002      	movs	r2, r0
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	4aa5      	ldr	r2, [pc, #660]	; (8001b88 <HAL_RCC_OscConfig+0x680>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d901      	bls.n	80018fc <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e185      	b.n	8001c08 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018fc:	4ba1      	ldr	r3, [pc, #644]	; (8001b84 <HAL_RCC_OscConfig+0x67c>)
 80018fe:	6a1b      	ldr	r3, [r3, #32]
 8001900:	2202      	movs	r2, #2
 8001902:	4013      	ands	r3, r2
 8001904:	d1f0      	bne.n	80018e8 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001906:	231f      	movs	r3, #31
 8001908:	18fb      	adds	r3, r7, r3
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d105      	bne.n	800191c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001910:	4b9c      	ldr	r3, [pc, #624]	; (8001b84 <HAL_RCC_OscConfig+0x67c>)
 8001912:	69da      	ldr	r2, [r3, #28]
 8001914:	4b9b      	ldr	r3, [pc, #620]	; (8001b84 <HAL_RCC_OscConfig+0x67c>)
 8001916:	499d      	ldr	r1, [pc, #628]	; (8001b8c <HAL_RCC_OscConfig+0x684>)
 8001918:	400a      	ands	r2, r1
 800191a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2210      	movs	r2, #16
 8001922:	4013      	ands	r3, r2
 8001924:	d063      	beq.n	80019ee <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	695b      	ldr	r3, [r3, #20]
 800192a:	2b01      	cmp	r3, #1
 800192c:	d12a      	bne.n	8001984 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800192e:	4b95      	ldr	r3, [pc, #596]	; (8001b84 <HAL_RCC_OscConfig+0x67c>)
 8001930:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001932:	4b94      	ldr	r3, [pc, #592]	; (8001b84 <HAL_RCC_OscConfig+0x67c>)
 8001934:	2104      	movs	r1, #4
 8001936:	430a      	orrs	r2, r1
 8001938:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800193a:	4b92      	ldr	r3, [pc, #584]	; (8001b84 <HAL_RCC_OscConfig+0x67c>)
 800193c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800193e:	4b91      	ldr	r3, [pc, #580]	; (8001b84 <HAL_RCC_OscConfig+0x67c>)
 8001940:	2101      	movs	r1, #1
 8001942:	430a      	orrs	r2, r1
 8001944:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001946:	f7ff f8ef 	bl	8000b28 <HAL_GetTick>
 800194a:	0003      	movs	r3, r0
 800194c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800194e:	e008      	b.n	8001962 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001950:	f7ff f8ea 	bl	8000b28 <HAL_GetTick>
 8001954:	0002      	movs	r2, r0
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b02      	cmp	r3, #2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e152      	b.n	8001c08 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001962:	4b88      	ldr	r3, [pc, #544]	; (8001b84 <HAL_RCC_OscConfig+0x67c>)
 8001964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001966:	2202      	movs	r2, #2
 8001968:	4013      	ands	r3, r2
 800196a:	d0f1      	beq.n	8001950 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800196c:	4b85      	ldr	r3, [pc, #532]	; (8001b84 <HAL_RCC_OscConfig+0x67c>)
 800196e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001970:	22f8      	movs	r2, #248	; 0xf8
 8001972:	4393      	bics	r3, r2
 8001974:	0019      	movs	r1, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	699b      	ldr	r3, [r3, #24]
 800197a:	00da      	lsls	r2, r3, #3
 800197c:	4b81      	ldr	r3, [pc, #516]	; (8001b84 <HAL_RCC_OscConfig+0x67c>)
 800197e:	430a      	orrs	r2, r1
 8001980:	635a      	str	r2, [r3, #52]	; 0x34
 8001982:	e034      	b.n	80019ee <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	695b      	ldr	r3, [r3, #20]
 8001988:	3305      	adds	r3, #5
 800198a:	d111      	bne.n	80019b0 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800198c:	4b7d      	ldr	r3, [pc, #500]	; (8001b84 <HAL_RCC_OscConfig+0x67c>)
 800198e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001990:	4b7c      	ldr	r3, [pc, #496]	; (8001b84 <HAL_RCC_OscConfig+0x67c>)
 8001992:	2104      	movs	r1, #4
 8001994:	438a      	bics	r2, r1
 8001996:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001998:	4b7a      	ldr	r3, [pc, #488]	; (8001b84 <HAL_RCC_OscConfig+0x67c>)
 800199a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800199c:	22f8      	movs	r2, #248	; 0xf8
 800199e:	4393      	bics	r3, r2
 80019a0:	0019      	movs	r1, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	699b      	ldr	r3, [r3, #24]
 80019a6:	00da      	lsls	r2, r3, #3
 80019a8:	4b76      	ldr	r3, [pc, #472]	; (8001b84 <HAL_RCC_OscConfig+0x67c>)
 80019aa:	430a      	orrs	r2, r1
 80019ac:	635a      	str	r2, [r3, #52]	; 0x34
 80019ae:	e01e      	b.n	80019ee <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80019b0:	4b74      	ldr	r3, [pc, #464]	; (8001b84 <HAL_RCC_OscConfig+0x67c>)
 80019b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019b4:	4b73      	ldr	r3, [pc, #460]	; (8001b84 <HAL_RCC_OscConfig+0x67c>)
 80019b6:	2104      	movs	r1, #4
 80019b8:	430a      	orrs	r2, r1
 80019ba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80019bc:	4b71      	ldr	r3, [pc, #452]	; (8001b84 <HAL_RCC_OscConfig+0x67c>)
 80019be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019c0:	4b70      	ldr	r3, [pc, #448]	; (8001b84 <HAL_RCC_OscConfig+0x67c>)
 80019c2:	2101      	movs	r1, #1
 80019c4:	438a      	bics	r2, r1
 80019c6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019c8:	f7ff f8ae 	bl	8000b28 <HAL_GetTick>
 80019cc:	0003      	movs	r3, r0
 80019ce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80019d0:	e008      	b.n	80019e4 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80019d2:	f7ff f8a9 	bl	8000b28 <HAL_GetTick>
 80019d6:	0002      	movs	r2, r0
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d901      	bls.n	80019e4 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e111      	b.n	8001c08 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80019e4:	4b67      	ldr	r3, [pc, #412]	; (8001b84 <HAL_RCC_OscConfig+0x67c>)
 80019e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019e8:	2202      	movs	r2, #2
 80019ea:	4013      	ands	r3, r2
 80019ec:	d1f1      	bne.n	80019d2 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2220      	movs	r2, #32
 80019f4:	4013      	ands	r3, r2
 80019f6:	d05c      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80019f8:	4b62      	ldr	r3, [pc, #392]	; (8001b84 <HAL_RCC_OscConfig+0x67c>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	220c      	movs	r2, #12
 80019fe:	4013      	ands	r3, r2
 8001a00:	2b0c      	cmp	r3, #12
 8001a02:	d00e      	beq.n	8001a22 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001a04:	4b5f      	ldr	r3, [pc, #380]	; (8001b84 <HAL_RCC_OscConfig+0x67c>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	220c      	movs	r2, #12
 8001a0a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001a0c:	2b08      	cmp	r3, #8
 8001a0e:	d114      	bne.n	8001a3a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001a10:	4b5c      	ldr	r3, [pc, #368]	; (8001b84 <HAL_RCC_OscConfig+0x67c>)
 8001a12:	685a      	ldr	r2, [r3, #4]
 8001a14:	23c0      	movs	r3, #192	; 0xc0
 8001a16:	025b      	lsls	r3, r3, #9
 8001a18:	401a      	ands	r2, r3
 8001a1a:	23c0      	movs	r3, #192	; 0xc0
 8001a1c:	025b      	lsls	r3, r3, #9
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d10b      	bne.n	8001a3a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001a22:	4b58      	ldr	r3, [pc, #352]	; (8001b84 <HAL_RCC_OscConfig+0x67c>)
 8001a24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a26:	2380      	movs	r3, #128	; 0x80
 8001a28:	029b      	lsls	r3, r3, #10
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	d040      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x5a8>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a1b      	ldr	r3, [r3, #32]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d03c      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e0e6      	b.n	8001c08 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6a1b      	ldr	r3, [r3, #32]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d01b      	beq.n	8001a7a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001a42:	4b50      	ldr	r3, [pc, #320]	; (8001b84 <HAL_RCC_OscConfig+0x67c>)
 8001a44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a46:	4b4f      	ldr	r3, [pc, #316]	; (8001b84 <HAL_RCC_OscConfig+0x67c>)
 8001a48:	2180      	movs	r1, #128	; 0x80
 8001a4a:	0249      	lsls	r1, r1, #9
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a50:	f7ff f86a 	bl	8000b28 <HAL_GetTick>
 8001a54:	0003      	movs	r3, r0
 8001a56:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001a58:	e008      	b.n	8001a6c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a5a:	f7ff f865 	bl	8000b28 <HAL_GetTick>
 8001a5e:	0002      	movs	r2, r0
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d901      	bls.n	8001a6c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e0cd      	b.n	8001c08 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001a6c:	4b45      	ldr	r3, [pc, #276]	; (8001b84 <HAL_RCC_OscConfig+0x67c>)
 8001a6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a70:	2380      	movs	r3, #128	; 0x80
 8001a72:	029b      	lsls	r3, r3, #10
 8001a74:	4013      	ands	r3, r2
 8001a76:	d0f0      	beq.n	8001a5a <HAL_RCC_OscConfig+0x552>
 8001a78:	e01b      	b.n	8001ab2 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001a7a:	4b42      	ldr	r3, [pc, #264]	; (8001b84 <HAL_RCC_OscConfig+0x67c>)
 8001a7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a7e:	4b41      	ldr	r3, [pc, #260]	; (8001b84 <HAL_RCC_OscConfig+0x67c>)
 8001a80:	4943      	ldr	r1, [pc, #268]	; (8001b90 <HAL_RCC_OscConfig+0x688>)
 8001a82:	400a      	ands	r2, r1
 8001a84:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a86:	f7ff f84f 	bl	8000b28 <HAL_GetTick>
 8001a8a:	0003      	movs	r3, r0
 8001a8c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001a8e:	e008      	b.n	8001aa2 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a90:	f7ff f84a 	bl	8000b28 <HAL_GetTick>
 8001a94:	0002      	movs	r2, r0
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e0b2      	b.n	8001c08 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001aa2:	4b38      	ldr	r3, [pc, #224]	; (8001b84 <HAL_RCC_OscConfig+0x67c>)
 8001aa4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001aa6:	2380      	movs	r3, #128	; 0x80
 8001aa8:	029b      	lsls	r3, r3, #10
 8001aaa:	4013      	ands	r3, r2
 8001aac:	d1f0      	bne.n	8001a90 <HAL_RCC_OscConfig+0x588>
 8001aae:	e000      	b.n	8001ab2 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001ab0:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d100      	bne.n	8001abc <HAL_RCC_OscConfig+0x5b4>
 8001aba:	e0a4      	b.n	8001c06 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001abc:	4b31      	ldr	r3, [pc, #196]	; (8001b84 <HAL_RCC_OscConfig+0x67c>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	220c      	movs	r2, #12
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	2b08      	cmp	r3, #8
 8001ac6:	d100      	bne.n	8001aca <HAL_RCC_OscConfig+0x5c2>
 8001ac8:	e078      	b.n	8001bbc <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d14c      	bne.n	8001b6c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ad2:	4b2c      	ldr	r3, [pc, #176]	; (8001b84 <HAL_RCC_OscConfig+0x67c>)
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	4b2b      	ldr	r3, [pc, #172]	; (8001b84 <HAL_RCC_OscConfig+0x67c>)
 8001ad8:	492e      	ldr	r1, [pc, #184]	; (8001b94 <HAL_RCC_OscConfig+0x68c>)
 8001ada:	400a      	ands	r2, r1
 8001adc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ade:	f7ff f823 	bl	8000b28 <HAL_GetTick>
 8001ae2:	0003      	movs	r3, r0
 8001ae4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ae8:	f7ff f81e 	bl	8000b28 <HAL_GetTick>
 8001aec:	0002      	movs	r2, r0
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e086      	b.n	8001c08 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001afa:	4b22      	ldr	r3, [pc, #136]	; (8001b84 <HAL_RCC_OscConfig+0x67c>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	2380      	movs	r3, #128	; 0x80
 8001b00:	049b      	lsls	r3, r3, #18
 8001b02:	4013      	ands	r3, r2
 8001b04:	d1f0      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b06:	4b1f      	ldr	r3, [pc, #124]	; (8001b84 <HAL_RCC_OscConfig+0x67c>)
 8001b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b0a:	220f      	movs	r2, #15
 8001b0c:	4393      	bics	r3, r2
 8001b0e:	0019      	movs	r1, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b14:	4b1b      	ldr	r3, [pc, #108]	; (8001b84 <HAL_RCC_OscConfig+0x67c>)
 8001b16:	430a      	orrs	r2, r1
 8001b18:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b1a:	4b1a      	ldr	r3, [pc, #104]	; (8001b84 <HAL_RCC_OscConfig+0x67c>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	4a1e      	ldr	r2, [pc, #120]	; (8001b98 <HAL_RCC_OscConfig+0x690>)
 8001b20:	4013      	ands	r3, r2
 8001b22:	0019      	movs	r1, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b2c:	431a      	orrs	r2, r3
 8001b2e:	4b15      	ldr	r3, [pc, #84]	; (8001b84 <HAL_RCC_OscConfig+0x67c>)
 8001b30:	430a      	orrs	r2, r1
 8001b32:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b34:	4b13      	ldr	r3, [pc, #76]	; (8001b84 <HAL_RCC_OscConfig+0x67c>)
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	4b12      	ldr	r3, [pc, #72]	; (8001b84 <HAL_RCC_OscConfig+0x67c>)
 8001b3a:	2180      	movs	r1, #128	; 0x80
 8001b3c:	0449      	lsls	r1, r1, #17
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b42:	f7fe fff1 	bl	8000b28 <HAL_GetTick>
 8001b46:	0003      	movs	r3, r0
 8001b48:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b4c:	f7fe ffec 	bl	8000b28 <HAL_GetTick>
 8001b50:	0002      	movs	r2, r0
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e054      	b.n	8001c08 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b5e:	4b09      	ldr	r3, [pc, #36]	; (8001b84 <HAL_RCC_OscConfig+0x67c>)
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	2380      	movs	r3, #128	; 0x80
 8001b64:	049b      	lsls	r3, r3, #18
 8001b66:	4013      	ands	r3, r2
 8001b68:	d0f0      	beq.n	8001b4c <HAL_RCC_OscConfig+0x644>
 8001b6a:	e04c      	b.n	8001c06 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b6c:	4b05      	ldr	r3, [pc, #20]	; (8001b84 <HAL_RCC_OscConfig+0x67c>)
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	4b04      	ldr	r3, [pc, #16]	; (8001b84 <HAL_RCC_OscConfig+0x67c>)
 8001b72:	4908      	ldr	r1, [pc, #32]	; (8001b94 <HAL_RCC_OscConfig+0x68c>)
 8001b74:	400a      	ands	r2, r1
 8001b76:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b78:	f7fe ffd6 	bl	8000b28 <HAL_GetTick>
 8001b7c:	0003      	movs	r3, r0
 8001b7e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b80:	e015      	b.n	8001bae <HAL_RCC_OscConfig+0x6a6>
 8001b82:	46c0      	nop			; (mov r8, r8)
 8001b84:	40021000 	.word	0x40021000
 8001b88:	00001388 	.word	0x00001388
 8001b8c:	efffffff 	.word	0xefffffff
 8001b90:	fffeffff 	.word	0xfffeffff
 8001b94:	feffffff 	.word	0xfeffffff
 8001b98:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b9c:	f7fe ffc4 	bl	8000b28 <HAL_GetTick>
 8001ba0:	0002      	movs	r2, r0
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e02c      	b.n	8001c08 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bae:	4b18      	ldr	r3, [pc, #96]	; (8001c10 <HAL_RCC_OscConfig+0x708>)
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	2380      	movs	r3, #128	; 0x80
 8001bb4:	049b      	lsls	r3, r3, #18
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	d1f0      	bne.n	8001b9c <HAL_RCC_OscConfig+0x694>
 8001bba:	e024      	b.n	8001c06 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d101      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e01f      	b.n	8001c08 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001bc8:	4b11      	ldr	r3, [pc, #68]	; (8001c10 <HAL_RCC_OscConfig+0x708>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001bce:	4b10      	ldr	r3, [pc, #64]	; (8001c10 <HAL_RCC_OscConfig+0x708>)
 8001bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd2:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bd4:	697a      	ldr	r2, [r7, #20]
 8001bd6:	23c0      	movs	r3, #192	; 0xc0
 8001bd8:	025b      	lsls	r3, r3, #9
 8001bda:	401a      	ands	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d10e      	bne.n	8001c02 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	220f      	movs	r2, #15
 8001be8:	401a      	ands	r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d107      	bne.n	8001c02 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001bf2:	697a      	ldr	r2, [r7, #20]
 8001bf4:	23f0      	movs	r3, #240	; 0xf0
 8001bf6:	039b      	lsls	r3, r3, #14
 8001bf8:	401a      	ands	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d001      	beq.n	8001c06 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e000      	b.n	8001c08 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001c06:	2300      	movs	r3, #0
}
 8001c08:	0018      	movs	r0, r3
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	b008      	add	sp, #32
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40021000 	.word	0x40021000

08001c14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d101      	bne.n	8001c28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e0bf      	b.n	8001da8 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c28:	4b61      	ldr	r3, [pc, #388]	; (8001db0 <HAL_RCC_ClockConfig+0x19c>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	4013      	ands	r3, r2
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d911      	bls.n	8001c5a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c36:	4b5e      	ldr	r3, [pc, #376]	; (8001db0 <HAL_RCC_ClockConfig+0x19c>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	4393      	bics	r3, r2
 8001c3e:	0019      	movs	r1, r3
 8001c40:	4b5b      	ldr	r3, [pc, #364]	; (8001db0 <HAL_RCC_ClockConfig+0x19c>)
 8001c42:	683a      	ldr	r2, [r7, #0]
 8001c44:	430a      	orrs	r2, r1
 8001c46:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c48:	4b59      	ldr	r3, [pc, #356]	; (8001db0 <HAL_RCC_ClockConfig+0x19c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	4013      	ands	r3, r2
 8001c50:	683a      	ldr	r2, [r7, #0]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d001      	beq.n	8001c5a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e0a6      	b.n	8001da8 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2202      	movs	r2, #2
 8001c60:	4013      	ands	r3, r2
 8001c62:	d015      	beq.n	8001c90 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2204      	movs	r2, #4
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	d006      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001c6e:	4b51      	ldr	r3, [pc, #324]	; (8001db4 <HAL_RCC_ClockConfig+0x1a0>)
 8001c70:	685a      	ldr	r2, [r3, #4]
 8001c72:	4b50      	ldr	r3, [pc, #320]	; (8001db4 <HAL_RCC_ClockConfig+0x1a0>)
 8001c74:	21e0      	movs	r1, #224	; 0xe0
 8001c76:	00c9      	lsls	r1, r1, #3
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c7c:	4b4d      	ldr	r3, [pc, #308]	; (8001db4 <HAL_RCC_ClockConfig+0x1a0>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	22f0      	movs	r2, #240	; 0xf0
 8001c82:	4393      	bics	r3, r2
 8001c84:	0019      	movs	r1, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	689a      	ldr	r2, [r3, #8]
 8001c8a:	4b4a      	ldr	r3, [pc, #296]	; (8001db4 <HAL_RCC_ClockConfig+0x1a0>)
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2201      	movs	r2, #1
 8001c96:	4013      	ands	r3, r2
 8001c98:	d04c      	beq.n	8001d34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d107      	bne.n	8001cb2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ca2:	4b44      	ldr	r3, [pc, #272]	; (8001db4 <HAL_RCC_ClockConfig+0x1a0>)
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	2380      	movs	r3, #128	; 0x80
 8001ca8:	029b      	lsls	r3, r3, #10
 8001caa:	4013      	ands	r3, r2
 8001cac:	d120      	bne.n	8001cf0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e07a      	b.n	8001da8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d107      	bne.n	8001cca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cba:	4b3e      	ldr	r3, [pc, #248]	; (8001db4 <HAL_RCC_ClockConfig+0x1a0>)
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	2380      	movs	r3, #128	; 0x80
 8001cc0:	049b      	lsls	r3, r3, #18
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	d114      	bne.n	8001cf0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e06e      	b.n	8001da8 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	2b03      	cmp	r3, #3
 8001cd0:	d107      	bne.n	8001ce2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001cd2:	4b38      	ldr	r3, [pc, #224]	; (8001db4 <HAL_RCC_ClockConfig+0x1a0>)
 8001cd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cd6:	2380      	movs	r3, #128	; 0x80
 8001cd8:	029b      	lsls	r3, r3, #10
 8001cda:	4013      	ands	r3, r2
 8001cdc:	d108      	bne.n	8001cf0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e062      	b.n	8001da8 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce2:	4b34      	ldr	r3, [pc, #208]	; (8001db4 <HAL_RCC_ClockConfig+0x1a0>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2202      	movs	r2, #2
 8001ce8:	4013      	ands	r3, r2
 8001cea:	d101      	bne.n	8001cf0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e05b      	b.n	8001da8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cf0:	4b30      	ldr	r3, [pc, #192]	; (8001db4 <HAL_RCC_ClockConfig+0x1a0>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	2203      	movs	r2, #3
 8001cf6:	4393      	bics	r3, r2
 8001cf8:	0019      	movs	r1, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685a      	ldr	r2, [r3, #4]
 8001cfe:	4b2d      	ldr	r3, [pc, #180]	; (8001db4 <HAL_RCC_ClockConfig+0x1a0>)
 8001d00:	430a      	orrs	r2, r1
 8001d02:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d04:	f7fe ff10 	bl	8000b28 <HAL_GetTick>
 8001d08:	0003      	movs	r3, r0
 8001d0a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d0c:	e009      	b.n	8001d22 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d0e:	f7fe ff0b 	bl	8000b28 <HAL_GetTick>
 8001d12:	0002      	movs	r2, r0
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	4a27      	ldr	r2, [pc, #156]	; (8001db8 <HAL_RCC_ClockConfig+0x1a4>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e042      	b.n	8001da8 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d22:	4b24      	ldr	r3, [pc, #144]	; (8001db4 <HAL_RCC_ClockConfig+0x1a0>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	220c      	movs	r2, #12
 8001d28:	401a      	ands	r2, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d1ec      	bne.n	8001d0e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d34:	4b1e      	ldr	r3, [pc, #120]	; (8001db0 <HAL_RCC_ClockConfig+0x19c>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d211      	bcs.n	8001d66 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d42:	4b1b      	ldr	r3, [pc, #108]	; (8001db0 <HAL_RCC_ClockConfig+0x19c>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2201      	movs	r2, #1
 8001d48:	4393      	bics	r3, r2
 8001d4a:	0019      	movs	r1, r3
 8001d4c:	4b18      	ldr	r3, [pc, #96]	; (8001db0 <HAL_RCC_ClockConfig+0x19c>)
 8001d4e:	683a      	ldr	r2, [r7, #0]
 8001d50:	430a      	orrs	r2, r1
 8001d52:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d54:	4b16      	ldr	r3, [pc, #88]	; (8001db0 <HAL_RCC_ClockConfig+0x19c>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2201      	movs	r2, #1
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d001      	beq.n	8001d66 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e020      	b.n	8001da8 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2204      	movs	r2, #4
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	d009      	beq.n	8001d84 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001d70:	4b10      	ldr	r3, [pc, #64]	; (8001db4 <HAL_RCC_ClockConfig+0x1a0>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	4a11      	ldr	r2, [pc, #68]	; (8001dbc <HAL_RCC_ClockConfig+0x1a8>)
 8001d76:	4013      	ands	r3, r2
 8001d78:	0019      	movs	r1, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	68da      	ldr	r2, [r3, #12]
 8001d7e:	4b0d      	ldr	r3, [pc, #52]	; (8001db4 <HAL_RCC_ClockConfig+0x1a0>)
 8001d80:	430a      	orrs	r2, r1
 8001d82:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001d84:	f000 f820 	bl	8001dc8 <HAL_RCC_GetSysClockFreq>
 8001d88:	0001      	movs	r1, r0
 8001d8a:	4b0a      	ldr	r3, [pc, #40]	; (8001db4 <HAL_RCC_ClockConfig+0x1a0>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	091b      	lsrs	r3, r3, #4
 8001d90:	220f      	movs	r2, #15
 8001d92:	4013      	ands	r3, r2
 8001d94:	4a0a      	ldr	r2, [pc, #40]	; (8001dc0 <HAL_RCC_ClockConfig+0x1ac>)
 8001d96:	5cd3      	ldrb	r3, [r2, r3]
 8001d98:	000a      	movs	r2, r1
 8001d9a:	40da      	lsrs	r2, r3
 8001d9c:	4b09      	ldr	r3, [pc, #36]	; (8001dc4 <HAL_RCC_ClockConfig+0x1b0>)
 8001d9e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001da0:	2000      	movs	r0, #0
 8001da2:	f7fe fe7b 	bl	8000a9c <HAL_InitTick>
  
  return HAL_OK;
 8001da6:	2300      	movs	r3, #0
}
 8001da8:	0018      	movs	r0, r3
 8001daa:	46bd      	mov	sp, r7
 8001dac:	b004      	add	sp, #16
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40022000 	.word	0x40022000
 8001db4:	40021000 	.word	0x40021000
 8001db8:	00001388 	.word	0x00001388
 8001dbc:	fffff8ff 	.word	0xfffff8ff
 8001dc0:	080029ec 	.word	0x080029ec
 8001dc4:	20000000 	.word	0x20000000

08001dc8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60fb      	str	r3, [r7, #12]
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60bb      	str	r3, [r7, #8]
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	617b      	str	r3, [r7, #20]
 8001dda:	2300      	movs	r3, #0
 8001ddc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001dde:	2300      	movs	r3, #0
 8001de0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001de2:	4b2d      	ldr	r3, [pc, #180]	; (8001e98 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	220c      	movs	r2, #12
 8001dec:	4013      	ands	r3, r2
 8001dee:	2b0c      	cmp	r3, #12
 8001df0:	d046      	beq.n	8001e80 <HAL_RCC_GetSysClockFreq+0xb8>
 8001df2:	d848      	bhi.n	8001e86 <HAL_RCC_GetSysClockFreq+0xbe>
 8001df4:	2b04      	cmp	r3, #4
 8001df6:	d002      	beq.n	8001dfe <HAL_RCC_GetSysClockFreq+0x36>
 8001df8:	2b08      	cmp	r3, #8
 8001dfa:	d003      	beq.n	8001e04 <HAL_RCC_GetSysClockFreq+0x3c>
 8001dfc:	e043      	b.n	8001e86 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001dfe:	4b27      	ldr	r3, [pc, #156]	; (8001e9c <HAL_RCC_GetSysClockFreq+0xd4>)
 8001e00:	613b      	str	r3, [r7, #16]
      break;
 8001e02:	e043      	b.n	8001e8c <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	0c9b      	lsrs	r3, r3, #18
 8001e08:	220f      	movs	r2, #15
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	4a24      	ldr	r2, [pc, #144]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0xd8>)
 8001e0e:	5cd3      	ldrb	r3, [r2, r3]
 8001e10:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001e12:	4b21      	ldr	r3, [pc, #132]	; (8001e98 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e16:	220f      	movs	r2, #15
 8001e18:	4013      	ands	r3, r2
 8001e1a:	4a22      	ldr	r2, [pc, #136]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0xdc>)
 8001e1c:	5cd3      	ldrb	r3, [r2, r3]
 8001e1e:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001e20:	68fa      	ldr	r2, [r7, #12]
 8001e22:	23c0      	movs	r3, #192	; 0xc0
 8001e24:	025b      	lsls	r3, r3, #9
 8001e26:	401a      	ands	r2, r3
 8001e28:	2380      	movs	r3, #128	; 0x80
 8001e2a:	025b      	lsls	r3, r3, #9
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d109      	bne.n	8001e44 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001e30:	68b9      	ldr	r1, [r7, #8]
 8001e32:	481a      	ldr	r0, [pc, #104]	; (8001e9c <HAL_RCC_GetSysClockFreq+0xd4>)
 8001e34:	f7fe f968 	bl	8000108 <__udivsi3>
 8001e38:	0003      	movs	r3, r0
 8001e3a:	001a      	movs	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4353      	muls	r3, r2
 8001e40:	617b      	str	r3, [r7, #20]
 8001e42:	e01a      	b.n	8001e7a <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	23c0      	movs	r3, #192	; 0xc0
 8001e48:	025b      	lsls	r3, r3, #9
 8001e4a:	401a      	ands	r2, r3
 8001e4c:	23c0      	movs	r3, #192	; 0xc0
 8001e4e:	025b      	lsls	r3, r3, #9
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d109      	bne.n	8001e68 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001e54:	68b9      	ldr	r1, [r7, #8]
 8001e56:	4814      	ldr	r0, [pc, #80]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001e58:	f7fe f956 	bl	8000108 <__udivsi3>
 8001e5c:	0003      	movs	r3, r0
 8001e5e:	001a      	movs	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	4353      	muls	r3, r2
 8001e64:	617b      	str	r3, [r7, #20]
 8001e66:	e008      	b.n	8001e7a <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001e68:	68b9      	ldr	r1, [r7, #8]
 8001e6a:	480c      	ldr	r0, [pc, #48]	; (8001e9c <HAL_RCC_GetSysClockFreq+0xd4>)
 8001e6c:	f7fe f94c 	bl	8000108 <__udivsi3>
 8001e70:	0003      	movs	r3, r0
 8001e72:	001a      	movs	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4353      	muls	r3, r2
 8001e78:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	613b      	str	r3, [r7, #16]
      break;
 8001e7e:	e005      	b.n	8001e8c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001e80:	4b09      	ldr	r3, [pc, #36]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001e82:	613b      	str	r3, [r7, #16]
      break;
 8001e84:	e002      	b.n	8001e8c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e86:	4b05      	ldr	r3, [pc, #20]	; (8001e9c <HAL_RCC_GetSysClockFreq+0xd4>)
 8001e88:	613b      	str	r3, [r7, #16]
      break;
 8001e8a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001e8c:	693b      	ldr	r3, [r7, #16]
}
 8001e8e:	0018      	movs	r0, r3
 8001e90:	46bd      	mov	sp, r7
 8001e92:	b006      	add	sp, #24
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	46c0      	nop			; (mov r8, r8)
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	007a1200 	.word	0x007a1200
 8001ea0:	080029fc 	.word	0x080029fc
 8001ea4:	08002a0c 	.word	0x08002a0c
 8001ea8:	02dc6c00 	.word	0x02dc6c00

08001eac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b086      	sub	sp, #24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	2380      	movs	r3, #128	; 0x80
 8001ec2:	025b      	lsls	r3, r3, #9
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	d100      	bne.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001ec8:	e08e      	b.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001eca:	2017      	movs	r0, #23
 8001ecc:	183b      	adds	r3, r7, r0
 8001ece:	2200      	movs	r2, #0
 8001ed0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ed2:	4b6e      	ldr	r3, [pc, #440]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ed4:	69da      	ldr	r2, [r3, #28]
 8001ed6:	2380      	movs	r3, #128	; 0x80
 8001ed8:	055b      	lsls	r3, r3, #21
 8001eda:	4013      	ands	r3, r2
 8001edc:	d110      	bne.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ede:	4b6b      	ldr	r3, [pc, #428]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ee0:	69da      	ldr	r2, [r3, #28]
 8001ee2:	4b6a      	ldr	r3, [pc, #424]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ee4:	2180      	movs	r1, #128	; 0x80
 8001ee6:	0549      	lsls	r1, r1, #21
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	61da      	str	r2, [r3, #28]
 8001eec:	4b67      	ldr	r3, [pc, #412]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001eee:	69da      	ldr	r2, [r3, #28]
 8001ef0:	2380      	movs	r3, #128	; 0x80
 8001ef2:	055b      	lsls	r3, r3, #21
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	60bb      	str	r3, [r7, #8]
 8001ef8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001efa:	183b      	adds	r3, r7, r0
 8001efc:	2201      	movs	r2, #1
 8001efe:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f00:	4b63      	ldr	r3, [pc, #396]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	2380      	movs	r3, #128	; 0x80
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	4013      	ands	r3, r2
 8001f0a:	d11a      	bne.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f0c:	4b60      	ldr	r3, [pc, #384]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	4b5f      	ldr	r3, [pc, #380]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f12:	2180      	movs	r1, #128	; 0x80
 8001f14:	0049      	lsls	r1, r1, #1
 8001f16:	430a      	orrs	r2, r1
 8001f18:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f1a:	f7fe fe05 	bl	8000b28 <HAL_GetTick>
 8001f1e:	0003      	movs	r3, r0
 8001f20:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f22:	e008      	b.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f24:	f7fe fe00 	bl	8000b28 <HAL_GetTick>
 8001f28:	0002      	movs	r2, r0
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b64      	cmp	r3, #100	; 0x64
 8001f30:	d901      	bls.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e0a6      	b.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f36:	4b56      	ldr	r3, [pc, #344]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	2380      	movs	r3, #128	; 0x80
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	4013      	ands	r3, r2
 8001f40:	d0f0      	beq.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f42:	4b52      	ldr	r3, [pc, #328]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f44:	6a1a      	ldr	r2, [r3, #32]
 8001f46:	23c0      	movs	r3, #192	; 0xc0
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d034      	beq.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685a      	ldr	r2, [r3, #4]
 8001f58:	23c0      	movs	r3, #192	; 0xc0
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	68fa      	ldr	r2, [r7, #12]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d02c      	beq.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f64:	4b49      	ldr	r3, [pc, #292]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f66:	6a1b      	ldr	r3, [r3, #32]
 8001f68:	4a4a      	ldr	r2, [pc, #296]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f6e:	4b47      	ldr	r3, [pc, #284]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f70:	6a1a      	ldr	r2, [r3, #32]
 8001f72:	4b46      	ldr	r3, [pc, #280]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f74:	2180      	movs	r1, #128	; 0x80
 8001f76:	0249      	lsls	r1, r1, #9
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f7c:	4b43      	ldr	r3, [pc, #268]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f7e:	6a1a      	ldr	r2, [r3, #32]
 8001f80:	4b42      	ldr	r3, [pc, #264]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f82:	4945      	ldr	r1, [pc, #276]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001f84:	400a      	ands	r2, r1
 8001f86:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001f88:	4b40      	ldr	r3, [pc, #256]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2201      	movs	r2, #1
 8001f92:	4013      	ands	r3, r2
 8001f94:	d013      	beq.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f96:	f7fe fdc7 	bl	8000b28 <HAL_GetTick>
 8001f9a:	0003      	movs	r3, r0
 8001f9c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f9e:	e009      	b.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fa0:	f7fe fdc2 	bl	8000b28 <HAL_GetTick>
 8001fa4:	0002      	movs	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	4a3c      	ldr	r2, [pc, #240]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d901      	bls.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e067      	b.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fb4:	4b35      	ldr	r3, [pc, #212]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001fb6:	6a1b      	ldr	r3, [r3, #32]
 8001fb8:	2202      	movs	r2, #2
 8001fba:	4013      	ands	r3, r2
 8001fbc:	d0f0      	beq.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fbe:	4b33      	ldr	r3, [pc, #204]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001fc0:	6a1b      	ldr	r3, [r3, #32]
 8001fc2:	4a34      	ldr	r2, [pc, #208]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	0019      	movs	r1, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685a      	ldr	r2, [r3, #4]
 8001fcc:	4b2f      	ldr	r3, [pc, #188]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001fd2:	2317      	movs	r3, #23
 8001fd4:	18fb      	adds	r3, r7, r3
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d105      	bne.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fdc:	4b2b      	ldr	r3, [pc, #172]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001fde:	69da      	ldr	r2, [r3, #28]
 8001fe0:	4b2a      	ldr	r3, [pc, #168]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001fe2:	492f      	ldr	r1, [pc, #188]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001fe4:	400a      	ands	r2, r1
 8001fe6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2201      	movs	r2, #1
 8001fee:	4013      	ands	r3, r2
 8001ff0:	d009      	beq.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ff2:	4b26      	ldr	r3, [pc, #152]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff6:	2203      	movs	r2, #3
 8001ff8:	4393      	bics	r3, r2
 8001ffa:	0019      	movs	r1, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	4b22      	ldr	r3, [pc, #136]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002002:	430a      	orrs	r2, r1
 8002004:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2202      	movs	r2, #2
 800200c:	4013      	ands	r3, r2
 800200e:	d009      	beq.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002010:	4b1e      	ldr	r3, [pc, #120]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002014:	4a23      	ldr	r2, [pc, #140]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002016:	4013      	ands	r3, r2
 8002018:	0019      	movs	r1, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	68da      	ldr	r2, [r3, #12]
 800201e:	4b1b      	ldr	r3, [pc, #108]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002020:	430a      	orrs	r2, r1
 8002022:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2220      	movs	r2, #32
 800202a:	4013      	ands	r3, r2
 800202c:	d009      	beq.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800202e:	4b17      	ldr	r3, [pc, #92]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	2210      	movs	r2, #16
 8002034:	4393      	bics	r3, r2
 8002036:	0019      	movs	r1, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	691a      	ldr	r2, [r3, #16]
 800203c:	4b13      	ldr	r3, [pc, #76]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800203e:	430a      	orrs	r2, r1
 8002040:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	2380      	movs	r3, #128	; 0x80
 8002048:	029b      	lsls	r3, r3, #10
 800204a:	4013      	ands	r3, r2
 800204c:	d009      	beq.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800204e:	4b0f      	ldr	r3, [pc, #60]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002052:	2280      	movs	r2, #128	; 0x80
 8002054:	4393      	bics	r3, r2
 8002056:	0019      	movs	r1, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	699a      	ldr	r2, [r3, #24]
 800205c:	4b0b      	ldr	r3, [pc, #44]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800205e:	430a      	orrs	r2, r1
 8002060:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	2380      	movs	r3, #128	; 0x80
 8002068:	00db      	lsls	r3, r3, #3
 800206a:	4013      	ands	r3, r2
 800206c:	d009      	beq.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800206e:	4b07      	ldr	r3, [pc, #28]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	2240      	movs	r2, #64	; 0x40
 8002074:	4393      	bics	r3, r2
 8002076:	0019      	movs	r1, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	695a      	ldr	r2, [r3, #20]
 800207c:	4b03      	ldr	r3, [pc, #12]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800207e:	430a      	orrs	r2, r1
 8002080:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002082:	2300      	movs	r3, #0
}
 8002084:	0018      	movs	r0, r3
 8002086:	46bd      	mov	sp, r7
 8002088:	b006      	add	sp, #24
 800208a:	bd80      	pop	{r7, pc}
 800208c:	40021000 	.word	0x40021000
 8002090:	40007000 	.word	0x40007000
 8002094:	fffffcff 	.word	0xfffffcff
 8002098:	fffeffff 	.word	0xfffeffff
 800209c:	00001388 	.word	0x00001388
 80020a0:	efffffff 	.word	0xefffffff
 80020a4:	fffcffff 	.word	0xfffcffff

080020a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e0a8      	b.n	800220c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d109      	bne.n	80020d6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685a      	ldr	r2, [r3, #4]
 80020c6:	2382      	movs	r3, #130	; 0x82
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d009      	beq.n	80020e2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	61da      	str	r2, [r3, #28]
 80020d4:	e005      	b.n	80020e2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	225d      	movs	r2, #93	; 0x5d
 80020ec:	5c9b      	ldrb	r3, [r3, r2]
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d107      	bne.n	8002104 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	225c      	movs	r2, #92	; 0x5c
 80020f8:	2100      	movs	r1, #0
 80020fa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	0018      	movs	r0, r3
 8002100:	f7fe fb32 	bl	8000768 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	225d      	movs	r2, #93	; 0x5d
 8002108:	2102      	movs	r1, #2
 800210a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2140      	movs	r1, #64	; 0x40
 8002118:	438a      	bics	r2, r1
 800211a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	68da      	ldr	r2, [r3, #12]
 8002120:	23e0      	movs	r3, #224	; 0xe0
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	429a      	cmp	r2, r3
 8002126:	d902      	bls.n	800212e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002128:	2300      	movs	r3, #0
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	e002      	b.n	8002134 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800212e:	2380      	movs	r3, #128	; 0x80
 8002130:	015b      	lsls	r3, r3, #5
 8002132:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	68da      	ldr	r2, [r3, #12]
 8002138:	23f0      	movs	r3, #240	; 0xf0
 800213a:	011b      	lsls	r3, r3, #4
 800213c:	429a      	cmp	r2, r3
 800213e:	d008      	beq.n	8002152 <HAL_SPI_Init+0xaa>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	68da      	ldr	r2, [r3, #12]
 8002144:	23e0      	movs	r3, #224	; 0xe0
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	429a      	cmp	r2, r3
 800214a:	d002      	beq.n	8002152 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685a      	ldr	r2, [r3, #4]
 8002156:	2382      	movs	r3, #130	; 0x82
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	401a      	ands	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6899      	ldr	r1, [r3, #8]
 8002160:	2384      	movs	r3, #132	; 0x84
 8002162:	021b      	lsls	r3, r3, #8
 8002164:	400b      	ands	r3, r1
 8002166:	431a      	orrs	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	691b      	ldr	r3, [r3, #16]
 800216c:	2102      	movs	r1, #2
 800216e:	400b      	ands	r3, r1
 8002170:	431a      	orrs	r2, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	695b      	ldr	r3, [r3, #20]
 8002176:	2101      	movs	r1, #1
 8002178:	400b      	ands	r3, r1
 800217a:	431a      	orrs	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6999      	ldr	r1, [r3, #24]
 8002180:	2380      	movs	r3, #128	; 0x80
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	400b      	ands	r3, r1
 8002186:	431a      	orrs	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	69db      	ldr	r3, [r3, #28]
 800218c:	2138      	movs	r1, #56	; 0x38
 800218e:	400b      	ands	r3, r1
 8002190:	431a      	orrs	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a1b      	ldr	r3, [r3, #32]
 8002196:	2180      	movs	r1, #128	; 0x80
 8002198:	400b      	ands	r3, r1
 800219a:	431a      	orrs	r2, r3
 800219c:	0011      	movs	r1, r2
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021a2:	2380      	movs	r3, #128	; 0x80
 80021a4:	019b      	lsls	r3, r3, #6
 80021a6:	401a      	ands	r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	430a      	orrs	r2, r1
 80021ae:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	0c1b      	lsrs	r3, r3, #16
 80021b6:	2204      	movs	r2, #4
 80021b8:	401a      	ands	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021be:	2110      	movs	r1, #16
 80021c0:	400b      	ands	r3, r1
 80021c2:	431a      	orrs	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021c8:	2108      	movs	r1, #8
 80021ca:	400b      	ands	r3, r1
 80021cc:	431a      	orrs	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	68d9      	ldr	r1, [r3, #12]
 80021d2:	23f0      	movs	r3, #240	; 0xf0
 80021d4:	011b      	lsls	r3, r3, #4
 80021d6:	400b      	ands	r3, r1
 80021d8:	431a      	orrs	r2, r3
 80021da:	0011      	movs	r1, r2
 80021dc:	68fa      	ldr	r2, [r7, #12]
 80021de:	2380      	movs	r3, #128	; 0x80
 80021e0:	015b      	lsls	r3, r3, #5
 80021e2:	401a      	ands	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	430a      	orrs	r2, r1
 80021ea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	69da      	ldr	r2, [r3, #28]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4907      	ldr	r1, [pc, #28]	; (8002214 <HAL_SPI_Init+0x16c>)
 80021f8:	400a      	ands	r2, r1
 80021fa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	225d      	movs	r2, #93	; 0x5d
 8002206:	2101      	movs	r1, #1
 8002208:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800220a:	2300      	movs	r3, #0
}
 800220c:	0018      	movs	r0, r3
 800220e:	46bd      	mov	sp, r7
 8002210:	b004      	add	sp, #16
 8002212:	bd80      	pop	{r7, pc}
 8002214:	fffff7ff 	.word	0xfffff7ff

08002218 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d101      	bne.n	800222a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e042      	b.n	80022b0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	223d      	movs	r2, #61	; 0x3d
 800222e:	5c9b      	ldrb	r3, [r3, r2]
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2b00      	cmp	r3, #0
 8002234:	d107      	bne.n	8002246 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	223c      	movs	r2, #60	; 0x3c
 800223a:	2100      	movs	r1, #0
 800223c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	0018      	movs	r0, r3
 8002242:	f7fe fadf 	bl	8000804 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	223d      	movs	r2, #61	; 0x3d
 800224a:	2102      	movs	r1, #2
 800224c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	3304      	adds	r3, #4
 8002256:	0019      	movs	r1, r3
 8002258:	0010      	movs	r0, r2
 800225a:	f000 f9b5 	bl	80025c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2246      	movs	r2, #70	; 0x46
 8002262:	2101      	movs	r1, #1
 8002264:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	223e      	movs	r2, #62	; 0x3e
 800226a:	2101      	movs	r1, #1
 800226c:	5499      	strb	r1, [r3, r2]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	223f      	movs	r2, #63	; 0x3f
 8002272:	2101      	movs	r1, #1
 8002274:	5499      	strb	r1, [r3, r2]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2240      	movs	r2, #64	; 0x40
 800227a:	2101      	movs	r1, #1
 800227c:	5499      	strb	r1, [r3, r2]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2241      	movs	r2, #65	; 0x41
 8002282:	2101      	movs	r1, #1
 8002284:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2242      	movs	r2, #66	; 0x42
 800228a:	2101      	movs	r1, #1
 800228c:	5499      	strb	r1, [r3, r2]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2243      	movs	r2, #67	; 0x43
 8002292:	2101      	movs	r1, #1
 8002294:	5499      	strb	r1, [r3, r2]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2244      	movs	r2, #68	; 0x44
 800229a:	2101      	movs	r1, #1
 800229c:	5499      	strb	r1, [r3, r2]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2245      	movs	r2, #69	; 0x45
 80022a2:	2101      	movs	r1, #1
 80022a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	223d      	movs	r2, #61	; 0x3d
 80022aa:	2101      	movs	r1, #1
 80022ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80022ae:	2300      	movs	r3, #0
}
 80022b0:	0018      	movs	r0, r3
 80022b2:	46bd      	mov	sp, r7
 80022b4:	b002      	add	sp, #8
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	223d      	movs	r2, #61	; 0x3d
 80022c4:	5c9b      	ldrb	r3, [r3, r2]
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d001      	beq.n	80022d0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e033      	b.n	8002338 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	223d      	movs	r2, #61	; 0x3d
 80022d4:	2102      	movs	r1, #2
 80022d6:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a18      	ldr	r2, [pc, #96]	; (8002340 <HAL_TIM_Base_Start+0x88>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d00f      	beq.n	8002302 <HAL_TIM_Base_Start+0x4a>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	2380      	movs	r3, #128	; 0x80
 80022e8:	05db      	lsls	r3, r3, #23
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d009      	beq.n	8002302 <HAL_TIM_Base_Start+0x4a>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a14      	ldr	r2, [pc, #80]	; (8002344 <HAL_TIM_Base_Start+0x8c>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d004      	beq.n	8002302 <HAL_TIM_Base_Start+0x4a>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a12      	ldr	r2, [pc, #72]	; (8002348 <HAL_TIM_Base_Start+0x90>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d111      	bne.n	8002326 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	2207      	movs	r2, #7
 800230a:	4013      	ands	r3, r2
 800230c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2b06      	cmp	r3, #6
 8002312:	d010      	beq.n	8002336 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2101      	movs	r1, #1
 8002320:	430a      	orrs	r2, r1
 8002322:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002324:	e007      	b.n	8002336 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2101      	movs	r1, #1
 8002332:	430a      	orrs	r2, r1
 8002334:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002336:	2300      	movs	r3, #0
}
 8002338:	0018      	movs	r0, r3
 800233a:	46bd      	mov	sp, r7
 800233c:	b004      	add	sp, #16
 800233e:	bd80      	pop	{r7, pc}
 8002340:	40012c00 	.word	0x40012c00
 8002344:	40000400 	.word	0x40000400
 8002348:	40014000 	.word	0x40014000

0800234c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	2202      	movs	r2, #2
 800235c:	4013      	ands	r3, r2
 800235e:	2b02      	cmp	r3, #2
 8002360:	d124      	bne.n	80023ac <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	2202      	movs	r2, #2
 800236a:	4013      	ands	r3, r2
 800236c:	2b02      	cmp	r3, #2
 800236e:	d11d      	bne.n	80023ac <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2203      	movs	r2, #3
 8002376:	4252      	negs	r2, r2
 8002378:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2201      	movs	r2, #1
 800237e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	2203      	movs	r2, #3
 8002388:	4013      	ands	r3, r2
 800238a:	d004      	beq.n	8002396 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	0018      	movs	r0, r3
 8002390:	f000 f902 	bl	8002598 <HAL_TIM_IC_CaptureCallback>
 8002394:	e007      	b.n	80023a6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	0018      	movs	r0, r3
 800239a:	f000 f8f5 	bl	8002588 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	0018      	movs	r0, r3
 80023a2:	f000 f901 	bl	80025a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	2204      	movs	r2, #4
 80023b4:	4013      	ands	r3, r2
 80023b6:	2b04      	cmp	r3, #4
 80023b8:	d125      	bne.n	8002406 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	2204      	movs	r2, #4
 80023c2:	4013      	ands	r3, r2
 80023c4:	2b04      	cmp	r3, #4
 80023c6:	d11e      	bne.n	8002406 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2205      	movs	r2, #5
 80023ce:	4252      	negs	r2, r2
 80023d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2202      	movs	r2, #2
 80023d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	699a      	ldr	r2, [r3, #24]
 80023de:	23c0      	movs	r3, #192	; 0xc0
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	4013      	ands	r3, r2
 80023e4:	d004      	beq.n	80023f0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	0018      	movs	r0, r3
 80023ea:	f000 f8d5 	bl	8002598 <HAL_TIM_IC_CaptureCallback>
 80023ee:	e007      	b.n	8002400 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	0018      	movs	r0, r3
 80023f4:	f000 f8c8 	bl	8002588 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	0018      	movs	r0, r3
 80023fc:	f000 f8d4 	bl	80025a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	691b      	ldr	r3, [r3, #16]
 800240c:	2208      	movs	r2, #8
 800240e:	4013      	ands	r3, r2
 8002410:	2b08      	cmp	r3, #8
 8002412:	d124      	bne.n	800245e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	2208      	movs	r2, #8
 800241c:	4013      	ands	r3, r2
 800241e:	2b08      	cmp	r3, #8
 8002420:	d11d      	bne.n	800245e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2209      	movs	r2, #9
 8002428:	4252      	negs	r2, r2
 800242a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2204      	movs	r2, #4
 8002430:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	69db      	ldr	r3, [r3, #28]
 8002438:	2203      	movs	r2, #3
 800243a:	4013      	ands	r3, r2
 800243c:	d004      	beq.n	8002448 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	0018      	movs	r0, r3
 8002442:	f000 f8a9 	bl	8002598 <HAL_TIM_IC_CaptureCallback>
 8002446:	e007      	b.n	8002458 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	0018      	movs	r0, r3
 800244c:	f000 f89c 	bl	8002588 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	0018      	movs	r0, r3
 8002454:	f000 f8a8 	bl	80025a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	691b      	ldr	r3, [r3, #16]
 8002464:	2210      	movs	r2, #16
 8002466:	4013      	ands	r3, r2
 8002468:	2b10      	cmp	r3, #16
 800246a:	d125      	bne.n	80024b8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	2210      	movs	r2, #16
 8002474:	4013      	ands	r3, r2
 8002476:	2b10      	cmp	r3, #16
 8002478:	d11e      	bne.n	80024b8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2211      	movs	r2, #17
 8002480:	4252      	negs	r2, r2
 8002482:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2208      	movs	r2, #8
 8002488:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	69da      	ldr	r2, [r3, #28]
 8002490:	23c0      	movs	r3, #192	; 0xc0
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	4013      	ands	r3, r2
 8002496:	d004      	beq.n	80024a2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	0018      	movs	r0, r3
 800249c:	f000 f87c 	bl	8002598 <HAL_TIM_IC_CaptureCallback>
 80024a0:	e007      	b.n	80024b2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	0018      	movs	r0, r3
 80024a6:	f000 f86f 	bl	8002588 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	0018      	movs	r0, r3
 80024ae:	f000 f87b 	bl	80025a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	2201      	movs	r2, #1
 80024c0:	4013      	ands	r3, r2
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d10f      	bne.n	80024e6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	2201      	movs	r2, #1
 80024ce:	4013      	ands	r3, r2
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d108      	bne.n	80024e6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2202      	movs	r2, #2
 80024da:	4252      	negs	r2, r2
 80024dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	0018      	movs	r0, r3
 80024e2:	f000 f849 	bl	8002578 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	2280      	movs	r2, #128	; 0x80
 80024ee:	4013      	ands	r3, r2
 80024f0:	2b80      	cmp	r3, #128	; 0x80
 80024f2:	d10f      	bne.n	8002514 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	2280      	movs	r2, #128	; 0x80
 80024fc:	4013      	ands	r3, r2
 80024fe:	2b80      	cmp	r3, #128	; 0x80
 8002500:	d108      	bne.n	8002514 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2281      	movs	r2, #129	; 0x81
 8002508:	4252      	negs	r2, r2
 800250a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	0018      	movs	r0, r3
 8002510:	f000 f940 	bl	8002794 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	2240      	movs	r2, #64	; 0x40
 800251c:	4013      	ands	r3, r2
 800251e:	2b40      	cmp	r3, #64	; 0x40
 8002520:	d10f      	bne.n	8002542 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	2240      	movs	r2, #64	; 0x40
 800252a:	4013      	ands	r3, r2
 800252c:	2b40      	cmp	r3, #64	; 0x40
 800252e:	d108      	bne.n	8002542 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2241      	movs	r2, #65	; 0x41
 8002536:	4252      	negs	r2, r2
 8002538:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	0018      	movs	r0, r3
 800253e:	f000 f83b 	bl	80025b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	691b      	ldr	r3, [r3, #16]
 8002548:	2220      	movs	r2, #32
 800254a:	4013      	ands	r3, r2
 800254c:	2b20      	cmp	r3, #32
 800254e:	d10f      	bne.n	8002570 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	2220      	movs	r2, #32
 8002558:	4013      	ands	r3, r2
 800255a:	2b20      	cmp	r3, #32
 800255c:	d108      	bne.n	8002570 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2221      	movs	r2, #33	; 0x21
 8002564:	4252      	negs	r2, r2
 8002566:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	0018      	movs	r0, r3
 800256c:	f000 f90a 	bl	8002784 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002570:	46c0      	nop			; (mov r8, r8)
 8002572:	46bd      	mov	sp, r7
 8002574:	b002      	add	sp, #8
 8002576:	bd80      	pop	{r7, pc}

08002578 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002580:	46c0      	nop			; (mov r8, r8)
 8002582:	46bd      	mov	sp, r7
 8002584:	b002      	add	sp, #8
 8002586:	bd80      	pop	{r7, pc}

08002588 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002590:	46c0      	nop			; (mov r8, r8)
 8002592:	46bd      	mov	sp, r7
 8002594:	b002      	add	sp, #8
 8002596:	bd80      	pop	{r7, pc}

08002598 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025a0:	46c0      	nop			; (mov r8, r8)
 80025a2:	46bd      	mov	sp, r7
 80025a4:	b002      	add	sp, #8
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025b0:	46c0      	nop			; (mov r8, r8)
 80025b2:	46bd      	mov	sp, r7
 80025b4:	b002      	add	sp, #8
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025c0:	46c0      	nop			; (mov r8, r8)
 80025c2:	46bd      	mov	sp, r7
 80025c4:	b002      	add	sp, #8
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	4a34      	ldr	r2, [pc, #208]	; (80026ac <TIM_Base_SetConfig+0xe4>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d008      	beq.n	80025f2 <TIM_Base_SetConfig+0x2a>
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	2380      	movs	r3, #128	; 0x80
 80025e4:	05db      	lsls	r3, r3, #23
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d003      	beq.n	80025f2 <TIM_Base_SetConfig+0x2a>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a30      	ldr	r2, [pc, #192]	; (80026b0 <TIM_Base_SetConfig+0xe8>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d108      	bne.n	8002604 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2270      	movs	r2, #112	; 0x70
 80025f6:	4393      	bics	r3, r2
 80025f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	4313      	orrs	r3, r2
 8002602:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4a29      	ldr	r2, [pc, #164]	; (80026ac <TIM_Base_SetConfig+0xe4>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d018      	beq.n	800263e <TIM_Base_SetConfig+0x76>
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	2380      	movs	r3, #128	; 0x80
 8002610:	05db      	lsls	r3, r3, #23
 8002612:	429a      	cmp	r2, r3
 8002614:	d013      	beq.n	800263e <TIM_Base_SetConfig+0x76>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a25      	ldr	r2, [pc, #148]	; (80026b0 <TIM_Base_SetConfig+0xe8>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d00f      	beq.n	800263e <TIM_Base_SetConfig+0x76>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a24      	ldr	r2, [pc, #144]	; (80026b4 <TIM_Base_SetConfig+0xec>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d00b      	beq.n	800263e <TIM_Base_SetConfig+0x76>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a23      	ldr	r2, [pc, #140]	; (80026b8 <TIM_Base_SetConfig+0xf0>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d007      	beq.n	800263e <TIM_Base_SetConfig+0x76>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a22      	ldr	r2, [pc, #136]	; (80026bc <TIM_Base_SetConfig+0xf4>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d003      	beq.n	800263e <TIM_Base_SetConfig+0x76>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a21      	ldr	r2, [pc, #132]	; (80026c0 <TIM_Base_SetConfig+0xf8>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d108      	bne.n	8002650 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	4a20      	ldr	r2, [pc, #128]	; (80026c4 <TIM_Base_SetConfig+0xfc>)
 8002642:	4013      	ands	r3, r2
 8002644:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	4313      	orrs	r3, r2
 800264e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2280      	movs	r2, #128	; 0x80
 8002654:	4393      	bics	r3, r2
 8002656:	001a      	movs	r2, r3
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	695b      	ldr	r3, [r3, #20]
 800265c:	4313      	orrs	r3, r2
 800265e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	689a      	ldr	r2, [r3, #8]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a0c      	ldr	r2, [pc, #48]	; (80026ac <TIM_Base_SetConfig+0xe4>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d00b      	beq.n	8002696 <TIM_Base_SetConfig+0xce>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a0d      	ldr	r2, [pc, #52]	; (80026b8 <TIM_Base_SetConfig+0xf0>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d007      	beq.n	8002696 <TIM_Base_SetConfig+0xce>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a0c      	ldr	r2, [pc, #48]	; (80026bc <TIM_Base_SetConfig+0xf4>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d003      	beq.n	8002696 <TIM_Base_SetConfig+0xce>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a0b      	ldr	r2, [pc, #44]	; (80026c0 <TIM_Base_SetConfig+0xf8>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d103      	bne.n	800269e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	691a      	ldr	r2, [r3, #16]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2201      	movs	r2, #1
 80026a2:	615a      	str	r2, [r3, #20]
}
 80026a4:	46c0      	nop			; (mov r8, r8)
 80026a6:	46bd      	mov	sp, r7
 80026a8:	b004      	add	sp, #16
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	40012c00 	.word	0x40012c00
 80026b0:	40000400 	.word	0x40000400
 80026b4:	40002000 	.word	0x40002000
 80026b8:	40014000 	.word	0x40014000
 80026bc:	40014400 	.word	0x40014400
 80026c0:	40014800 	.word	0x40014800
 80026c4:	fffffcff 	.word	0xfffffcff

080026c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	223c      	movs	r2, #60	; 0x3c
 80026d6:	5c9b      	ldrb	r3, [r3, r2]
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d101      	bne.n	80026e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80026dc:	2302      	movs	r3, #2
 80026de:	e047      	b.n	8002770 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	223c      	movs	r2, #60	; 0x3c
 80026e4:	2101      	movs	r1, #1
 80026e6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	223d      	movs	r2, #61	; 0x3d
 80026ec:	2102      	movs	r1, #2
 80026ee:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2270      	movs	r2, #112	; 0x70
 8002704:	4393      	bics	r3, r2
 8002706:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	4313      	orrs	r3, r2
 8002710:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a16      	ldr	r2, [pc, #88]	; (8002778 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d00f      	beq.n	8002744 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	2380      	movs	r3, #128	; 0x80
 800272a:	05db      	lsls	r3, r3, #23
 800272c:	429a      	cmp	r2, r3
 800272e:	d009      	beq.n	8002744 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a11      	ldr	r2, [pc, #68]	; (800277c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d004      	beq.n	8002744 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a10      	ldr	r2, [pc, #64]	; (8002780 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d10c      	bne.n	800275e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	2280      	movs	r2, #128	; 0x80
 8002748:	4393      	bics	r3, r2
 800274a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	68ba      	ldr	r2, [r7, #8]
 8002752:	4313      	orrs	r3, r2
 8002754:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	68ba      	ldr	r2, [r7, #8]
 800275c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	223d      	movs	r2, #61	; 0x3d
 8002762:	2101      	movs	r1, #1
 8002764:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	223c      	movs	r2, #60	; 0x3c
 800276a:	2100      	movs	r1, #0
 800276c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800276e:	2300      	movs	r3, #0
}
 8002770:	0018      	movs	r0, r3
 8002772:	46bd      	mov	sp, r7
 8002774:	b004      	add	sp, #16
 8002776:	bd80      	pop	{r7, pc}
 8002778:	40012c00 	.word	0x40012c00
 800277c:	40000400 	.word	0x40000400
 8002780:	40014000 	.word	0x40014000

08002784 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800278c:	46c0      	nop			; (mov r8, r8)
 800278e:	46bd      	mov	sp, r7
 8002790:	b002      	add	sp, #8
 8002792:	bd80      	pop	{r7, pc}

08002794 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800279c:	46c0      	nop			; (mov r8, r8)
 800279e:	46bd      	mov	sp, r7
 80027a0:	b002      	add	sp, #8
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <HAL_TSC_Init>:
  *         in the TSC_InitTypeDef structure and initialize the associated handle.
  * @param  htsc TSC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_Init(TSC_HandleTypeDef *htsc)
{
 80027a4:	b590      	push	{r4, r7, lr}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  /* Check TSC handle allocation */
  if (htsc == NULL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d101      	bne.n	80027b6 <HAL_TSC_Init+0x12>
  {
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e074      	b.n	80028a0 <HAL_TSC_Init+0xfc>
  assert_param(IS_TSC_MCE_IT(htsc->Init.MaxCountInterrupt));
  assert_param(IS_TSC_GROUP(htsc->Init.ChannelIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.ShieldIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.SamplingIOs));

  if (htsc->State == HAL_TSC_STATE_RESET)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	223c      	movs	r2, #60	; 0x3c
 80027ba:	5c9b      	ldrb	r3, [r3, r2]
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d107      	bne.n	80027d2 <HAL_TSC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htsc->Lock = HAL_UNLOCKED;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	223d      	movs	r2, #61	; 0x3d
 80027c6:	2100      	movs	r1, #0
 80027c8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    htsc->MspInitCallback(htsc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_TSC_MspInit(htsc);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	0018      	movs	r0, r3
 80027ce:	f7fe f83f 	bl	8000850 <HAL_TSC_MspInit>
#endif /* USE_HAL_TSC_REGISTER_CALLBACKS */
  }

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_BUSY;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	223c      	movs	r2, #60	; 0x3c
 80027d6:	2102      	movs	r1, #2
 80027d8:	5499      	strb	r1, [r3, r2]

  /*--------------------------------------------------------------------------*/
  /* Set TSC parameters */

  /* Enable TSC */
  htsc->Instance->CR = TSC_CR_TSCE;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2201      	movs	r2, #1
 80027e0:	601a      	str	r2, [r3, #0]

  /* Set all functions */
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	6819      	ldr	r1, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685a      	ldr	r2, [r3, #4]
                         htsc->Init.CTPulseLowLength |
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 80027f0:	431a      	orrs	r2, r3
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	045b      	lsls	r3, r3, #17
                         htsc->Init.CTPulseLowLength |
 80027f8:	431a      	orrs	r2, r3
                         htsc->Init.SpreadSpectrumPrescaler |
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	695b      	ldr	r3, [r3, #20]
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 80027fe:	431a      	orrs	r2, r3
                         htsc->Init.PulseGeneratorPrescaler |
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	699b      	ldr	r3, [r3, #24]
                         htsc->Init.SpreadSpectrumPrescaler |
 8002804:	431a      	orrs	r2, r3
                         htsc->Init.MaxCountValue |
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	69db      	ldr	r3, [r3, #28]
                         htsc->Init.PulseGeneratorPrescaler |
 800280a:	431a      	orrs	r2, r3
                         htsc->Init.SynchroPinPolarity |
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         htsc->Init.MaxCountValue |
 8002810:	431a      	orrs	r2, r3
                         htsc->Init.AcquisitionMode);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         htsc->Init.SynchroPinPolarity |
 8002816:	431a      	orrs	r2, r3
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	430a      	orrs	r2, r1
 800281e:	601a      	str	r2, [r3, #0]

  /* Spread spectrum */
  if (htsc->Init.SpreadSpectrum == ENABLE)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	7b1b      	ldrb	r3, [r3, #12]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d108      	bne.n	800283a <HAL_TSC_Init+0x96>
  {
    htsc->Instance->CR |= TSC_CR_SSE;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2180      	movs	r1, #128	; 0x80
 8002834:	0249      	lsls	r1, r1, #9
 8002836:	430a      	orrs	r2, r1
 8002838:	601a      	str	r2, [r3, #0]
  }

  /* Disable Schmitt trigger hysteresis on all used TSC IOs */
  htsc->Instance->IOHCR = (~(htsc->Init.ChannelIOs | htsc->Init.ShieldIOs | htsc->Init.SamplingIOs));
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002842:	431a      	orrs	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002848:	431a      	orrs	r2, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	43d2      	mvns	r2, r2
 8002850:	611a      	str	r2, [r3, #16]

  /* Set channel and shield IOs */
  htsc->Instance->IOCCR = (htsc->Init.ChannelIOs | htsc->Init.ShieldIOs);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	430a      	orrs	r2, r1
 8002860:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set sampling IOs */
  htsc->Instance->IOSCR = htsc->Init.SamplingIOs;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800286a:	621a      	str	r2, [r3, #32]

  /* Set the groups to be acquired */
  htsc->Instance->IOGCSR = TSC_extract_groups(htsc->Init.ChannelIOs);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681c      	ldr	r4, [r3, #0]
 8002874:	0010      	movs	r0, r2
 8002876:	f000 f817 	bl	80028a8 <TSC_extract_groups>
 800287a:	0003      	movs	r3, r0
 800287c:	6323      	str	r3, [r4, #48]	; 0x30

  /* Disable interrupts */
  htsc->Instance->IER &= (~(TSC_IT_EOA | TSC_IT_MCE));
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	685a      	ldr	r2, [r3, #4]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2103      	movs	r1, #3
 800288a:	438a      	bics	r2, r1
 800288c:	605a      	str	r2, [r3, #4]

  /* Clear flags */
  htsc->Instance->ICR = (TSC_FLAG_EOA | TSC_FLAG_MCE);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2203      	movs	r2, #3
 8002894:	609a      	str	r2, [r3, #8]

  /*--------------------------------------------------------------------------*/

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_READY;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	223c      	movs	r2, #60	; 0x3c
 800289a:	2101      	movs	r1, #1
 800289c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800289e:	2300      	movs	r3, #0
}
 80028a0:	0018      	movs	r0, r3
 80028a2:	46bd      	mov	sp, r7
 80028a4:	b003      	add	sp, #12
 80028a6:	bd90      	pop	{r4, r7, pc}

080028a8 <TSC_extract_groups>:
  * @brief  Utility function used to set the acquired groups mask.
  * @param  iomask Channels IOs mask
  * @retval Acquired groups mask
  */
static uint32_t TSC_extract_groups(uint32_t iomask)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  uint32_t groups = 0UL;
 80028b0:	2300      	movs	r3, #0
 80028b2:	60fb      	str	r3, [r7, #12]
  uint32_t idx;

  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 80028b4:	2300      	movs	r3, #0
 80028b6:	60bb      	str	r3, [r7, #8]
 80028b8:	e011      	b.n	80028de <TSC_extract_groups+0x36>
  {
    if ((iomask & (0x0FUL << (idx * 4UL))) != 0UL)
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	220f      	movs	r2, #15
 80028c0:	409a      	lsls	r2, r3
 80028c2:	0013      	movs	r3, r2
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	4013      	ands	r3, r2
 80028c8:	d006      	beq.n	80028d8 <TSC_extract_groups+0x30>
    {
      groups |= (1UL << idx);
 80028ca:	2201      	movs	r2, #1
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	409a      	lsls	r2, r3
 80028d0:	0013      	movs	r3, r2
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	60fb      	str	r3, [r7, #12]
  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	3301      	adds	r3, #1
 80028dc:	60bb      	str	r3, [r7, #8]
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	2b07      	cmp	r3, #7
 80028e2:	d9ea      	bls.n	80028ba <TSC_extract_groups+0x12>
    }
  }

  return groups;
 80028e4:	68fb      	ldr	r3, [r7, #12]
}
 80028e6:	0018      	movs	r0, r3
 80028e8:	46bd      	mov	sp, r7
 80028ea:	b004      	add	sp, #16
 80028ec:	bd80      	pop	{r7, pc}
	...

080028f0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80028f8:	4b09      	ldr	r3, [pc, #36]	; (8002920 <USB_DisableGlobalInt+0x30>)
 80028fa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2240      	movs	r2, #64	; 0x40
 8002900:	5a9b      	ldrh	r3, [r3, r2]
 8002902:	b29b      	uxth	r3, r3
 8002904:	68fa      	ldr	r2, [r7, #12]
 8002906:	b292      	uxth	r2, r2
 8002908:	43d2      	mvns	r2, r2
 800290a:	b292      	uxth	r2, r2
 800290c:	4013      	ands	r3, r2
 800290e:	b299      	uxth	r1, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2240      	movs	r2, #64	; 0x40
 8002914:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8002916:	2300      	movs	r3, #0
}
 8002918:	0018      	movs	r0, r3
 800291a:	46bd      	mov	sp, r7
 800291c:	b004      	add	sp, #16
 800291e:	bd80      	pop	{r7, pc}
 8002920:	0000bf80 	.word	0x0000bf80

08002924 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002924:	b084      	sub	sp, #16
 8002926:	b590      	push	{r4, r7, lr}
 8002928:	46c6      	mov	lr, r8
 800292a:	b500      	push	{lr}
 800292c:	b082      	sub	sp, #8
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
 8002932:	2004      	movs	r0, #4
 8002934:	2410      	movs	r4, #16
 8002936:	46a4      	mov	ip, r4
 8002938:	2408      	movs	r4, #8
 800293a:	46a0      	mov	r8, r4
 800293c:	44b8      	add	r8, r7
 800293e:	44c4      	add	ip, r8
 8002940:	4460      	add	r0, ip
 8002942:	6001      	str	r1, [r0, #0]
 8002944:	6042      	str	r2, [r0, #4]
 8002946:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2240      	movs	r2, #64	; 0x40
 800294c:	2101      	movs	r1, #1
 800294e:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2240      	movs	r2, #64	; 0x40
 8002954:	2100      	movs	r1, #0
 8002956:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2244      	movs	r2, #68	; 0x44
 800295c:	2100      	movs	r1, #0
 800295e:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2250      	movs	r2, #80	; 0x50
 8002964:	2100      	movs	r1, #0
 8002966:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	0018      	movs	r0, r3
 800296c:	46bd      	mov	sp, r7
 800296e:	b002      	add	sp, #8
 8002970:	bc80      	pop	{r7}
 8002972:	46b8      	mov	r8, r7
 8002974:	bc90      	pop	{r4, r7}
 8002976:	bc08      	pop	{r3}
 8002978:	b004      	add	sp, #16
 800297a:	4718      	bx	r3

0800297c <__libc_init_array>:
 800297c:	b570      	push	{r4, r5, r6, lr}
 800297e:	2600      	movs	r6, #0
 8002980:	4d0c      	ldr	r5, [pc, #48]	; (80029b4 <__libc_init_array+0x38>)
 8002982:	4c0d      	ldr	r4, [pc, #52]	; (80029b8 <__libc_init_array+0x3c>)
 8002984:	1b64      	subs	r4, r4, r5
 8002986:	10a4      	asrs	r4, r4, #2
 8002988:	42a6      	cmp	r6, r4
 800298a:	d109      	bne.n	80029a0 <__libc_init_array+0x24>
 800298c:	2600      	movs	r6, #0
 800298e:	f000 f821 	bl	80029d4 <_init>
 8002992:	4d0a      	ldr	r5, [pc, #40]	; (80029bc <__libc_init_array+0x40>)
 8002994:	4c0a      	ldr	r4, [pc, #40]	; (80029c0 <__libc_init_array+0x44>)
 8002996:	1b64      	subs	r4, r4, r5
 8002998:	10a4      	asrs	r4, r4, #2
 800299a:	42a6      	cmp	r6, r4
 800299c:	d105      	bne.n	80029aa <__libc_init_array+0x2e>
 800299e:	bd70      	pop	{r4, r5, r6, pc}
 80029a0:	00b3      	lsls	r3, r6, #2
 80029a2:	58eb      	ldr	r3, [r5, r3]
 80029a4:	4798      	blx	r3
 80029a6:	3601      	adds	r6, #1
 80029a8:	e7ee      	b.n	8002988 <__libc_init_array+0xc>
 80029aa:	00b3      	lsls	r3, r6, #2
 80029ac:	58eb      	ldr	r3, [r5, r3]
 80029ae:	4798      	blx	r3
 80029b0:	3601      	adds	r6, #1
 80029b2:	e7f2      	b.n	800299a <__libc_init_array+0x1e>
 80029b4:	08002a1c 	.word	0x08002a1c
 80029b8:	08002a1c 	.word	0x08002a1c
 80029bc:	08002a1c 	.word	0x08002a1c
 80029c0:	08002a20 	.word	0x08002a20

080029c4 <memset>:
 80029c4:	0003      	movs	r3, r0
 80029c6:	1882      	adds	r2, r0, r2
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d100      	bne.n	80029ce <memset+0xa>
 80029cc:	4770      	bx	lr
 80029ce:	7019      	strb	r1, [r3, #0]
 80029d0:	3301      	adds	r3, #1
 80029d2:	e7f9      	b.n	80029c8 <memset+0x4>

080029d4 <_init>:
 80029d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029d6:	46c0      	nop			; (mov r8, r8)
 80029d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029da:	bc08      	pop	{r3}
 80029dc:	469e      	mov	lr, r3
 80029de:	4770      	bx	lr

080029e0 <_fini>:
 80029e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029e2:	46c0      	nop			; (mov r8, r8)
 80029e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029e6:	bc08      	pop	{r3}
 80029e8:	469e      	mov	lr, r3
 80029ea:	4770      	bx	lr
